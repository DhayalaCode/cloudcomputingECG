
/Users/jansiranibalasubramanian/final_ECG/ECG_main/target/3.3.0/photon/ECG_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ac4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2ae0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a2ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000c68  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2b60  080a2b60  00022b60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2b88  080a2b88  00022b88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c17e6  00000000  00000000  00022b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00011153  00000000  00000000  000e4372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001ac28  00000000  00000000  000f54c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002078  00000000  00000000  001100ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00004f78  00000000  00000000  00112165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00029446  00000000  00000000  001170dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002f5e1  00000000  00000000  00140523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000baa90  00000000  00000000  0016fb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000558c  00000000  00000000  0022a594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fb4f 	bl	80a26d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fb57 	bl	80a26ec <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2ae4 	.word	0x080a2ae4
 80a004c:	2000007c 	.word	0x2000007c
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	20000ce1 	.word	0x20000ce1
 80a0058:	20000ce1 	.word	0x20000ce1

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fc4b 	bl	80a18f8 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2ab8 	.word	0x080a2ab8
 80a0080:	080a2ad8 	.word	0x080a2ad8

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b816 	b.w	80a00b4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f931 	bl	80a02f0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bbe9 	b.w	80a1868 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bcbb 	b.w	80a0a10 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bcb9 	b.w	80a0a10 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f000 bcbf 	b.w	80a0a20 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
unsigned long displayDelay = 128;
int nextTime = millis() + 15000;
bool prevSwitch = FALSE;


void setup() {
 80a00b4:	b510      	push	{r4, lr}
  //getting data from the photon and starting it.
  Serial.begin(9600);
  lcd.begin(16, 2);
 80a00b6:	4c29      	ldr	r4, [pc, #164]	; (80a015c <setup+0xa8>)
  Serial.begin(9600);
 80a00b8:	f001 fa96 	bl	80a15e8 <_Z16_fetch_usbserialv>
 80a00bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00c0:	f001 fa78 	bl	80a15b4 <_ZN9USBSerial5beginEl>
  lcd.begin(16, 2);
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	2300      	movs	r3, #0
 80a00c8:	2202      	movs	r2, #2
 80a00ca:	2110      	movs	r1, #16
 80a00cc:	f000 fa65 	bl	80a059a <_ZN7rgb_lcd5beginEhhh>
  lcd.setRGB(122, 0, 0);
 80a00d0:	2300      	movs	r3, #0
 80a00d2:	4620      	mov	r0, r4
 80a00d4:	461a      	mov	r2, r3
 80a00d6:	217a      	movs	r1, #122	; 0x7a
 80a00d8:	f000 fa4b 	bl	80a0572 <_ZN7rgb_lcd6setRGBEhhh>
  pinMode(D4, INPUT);
 80a00dc:	2100      	movs	r1, #0
 80a00de:	2004      	movs	r0, #4
 80a00e0:	f001 fc86 	bl	80a19f0 <pinMode>
  pinMode(D2, INPUT);
 80a00e4:	2100      	movs	r1, #0
 80a00e6:	2002      	movs	r0, #2
 80a00e8:	f001 fc82 	bl	80a19f0 <pinMode>
  pinMode(A0, INPUT);
 80a00ec:	2100      	movs	r1, #0
 80a00ee:	200a      	movs	r0, #10
 80a00f0:	f001 fc7e 	bl	80a19f0 <pinMode>
  pinMode(D5, INPUT_PULLDOWN);
 80a00f4:	2103      	movs	r1, #3
 80a00f6:	2005      	movs	r0, #5
 80a00f8:	f001 fc7a 	bl	80a19f0 <pinMode>


  //NP
  //lcd statements for the display
 lcd.setCursor(0,0);
 80a00fc:	2200      	movs	r2, #0
 80a00fe:	4620      	mov	r0, r4
 80a0100:	4611      	mov	r1, r2
 80a0102:	f000 fa01 	bl	80a0508 <_ZN7rgb_lcd9setCursorEhh>
 lcd.print("Powering on...");
 80a0106:	4620      	mov	r0, r4
 80a0108:	4915      	ldr	r1, [pc, #84]	; (80a0160 <setup+0xac>)
 80a010a:	f001 f8d7 	bl	80a12bc <_ZN5Print5printEPKc>
 lcd.setRGB(122, 0, 0);
 80a010e:	2300      	movs	r3, #0
 80a0110:	217a      	movs	r1, #122	; 0x7a
 80a0112:	461a      	mov	r2, r3
 80a0114:	4620      	mov	r0, r4
 80a0116:	f000 fa2c 	bl	80a0572 <_ZN7rgb_lcd6setRGBEhhh>
 delay(1000);
 80a011a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a011e:	f000 fcaf 	bl	80a0a80 <delay>
 lcd.setRGB(0,122,0);
 80a0122:	2300      	movs	r3, #0
 80a0124:	227a      	movs	r2, #122	; 0x7a
 80a0126:	4619      	mov	r1, r3
 80a0128:	4620      	mov	r0, r4
 80a012a:	f000 fa22 	bl	80a0572 <_ZN7rgb_lcd6setRGBEhhh>
 lcd.clear();
 80a012e:	4620      	mov	r0, r4
 80a0130:	f000 f9e0 	bl	80a04f4 <_ZN7rgb_lcd5clearEv>
 lcd.setCursor(0,0);
 80a0134:	2200      	movs	r2, #0
 80a0136:	4620      	mov	r0, r4
 80a0138:	4611      	mov	r1, r2
 80a013a:	f000 f9e5 	bl	80a0508 <_ZN7rgb_lcd9setCursorEhh>
 lcd.print("Heart Rate: ");
 80a013e:	4620      	mov	r0, r4
 80a0140:	4908      	ldr	r1, [pc, #32]	; (80a0164 <setup+0xb0>)
 80a0142:	f001 f8bb 	bl	80a12bc <_ZN5Print5printEPKc>
 lcd.setCursor(0,1);
 80a0146:	4620      	mov	r0, r4
 80a0148:	2100      	movs	r1, #0
 80a014a:	2201      	movs	r2, #1
 80a014c:	f000 f9dc 	bl	80a0508 <_ZN7rgb_lcd9setCursorEhh>
 lcd.print("signal: ");
 80a0150:	4620      	mov	r0, r4

 
}
 80a0152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 lcd.print("signal: ");
 80a0156:	4904      	ldr	r1, [pc, #16]	; (80a0168 <setup+0xb4>)
 80a0158:	f001 b8b0 	b.w	80a12bc <_ZN5Print5printEPKc>
 80a015c:	20000868 	.word	0x20000868
 80a0160:	080a2884 	.word	0x080a2884
 80a0164:	080a2893 	.word	0x080a2893
 80a0168:	080a28a0 	.word	0x080a28a0

080a016c <_Z20reading_input_signalv>:
  updating_display(inByte, BPM);  //updates on the screen 
  

}

int reading_input_signal(){
 80a016c:	b508      	push	{r3, lr}
  inputSignal = analogRead(sensorPin);  //read the A0 pin 
 80a016e:	4b05      	ldr	r3, [pc, #20]	; (80a0184 <_Z20reading_input_signalv+0x18>)
 80a0170:	8818      	ldrh	r0, [r3, #0]
 80a0172:	f001 fc61 	bl	80a1a38 <analogRead>
 80a0176:	f002 f9b5 	bl	80a24e4 <__aeabi_i2f>
 80a017a:	4b03      	ldr	r3, [pc, #12]	; (80a0188 <_Z20reading_input_signalv+0x1c>)
 80a017c:	6018      	str	r0, [r3, #0]
  return inputSignal;
 80a017e:	f002 fa7b 	bl	80a2678 <__aeabi_f2iz>
}
 80a0182:	bd08      	pop	{r3, pc}
 80a0184:	20000008 	.word	0x20000008
 80a0188:	20000860 	.word	0x20000860

080a018c <_Z16updating_displayii>:

void updating_display(int inputSignal, int BPM){ 
 80a018c:	b530      	push	{r4, r5, lr}
 80a018e:	4605      	mov	r5, r0
 80a0190:	460c      	mov	r4, r1
 80a0192:	b085      	sub	sp, #20
  lcd.setCursor(9,1);//top line
 80a0194:	2201      	movs	r2, #1
 80a0196:	2109      	movs	r1, #9
 80a0198:	4811      	ldr	r0, [pc, #68]	; (80a01e0 <_Z16updating_displayii+0x54>)
 80a019a:	f000 f9b5 	bl	80a0508 <_ZN7rgb_lcd9setCursorEhh>
  lcd.print(String(inputSignal));
 80a019e:	220a      	movs	r2, #10
 80a01a0:	4629      	mov	r1, r5
 80a01a2:	4668      	mov	r0, sp
 80a01a4:	f001 f934 	bl	80a1410 <_ZN6StringC1Eih>
 80a01a8:	9900      	ldr	r1, [sp, #0]
 80a01aa:	480d      	ldr	r0, [pc, #52]	; (80a01e0 <_Z16updating_displayii+0x54>)
 80a01ac:	f001 f886 	bl	80a12bc <_ZN5Print5printEPKc>
 80a01b0:	4668      	mov	r0, sp
 80a01b2:	f001 f8d2 	bl	80a135a <_ZN6StringD1Ev>

  lcd.setCursor(11, 0);
 80a01b6:	2200      	movs	r2, #0
 80a01b8:	210b      	movs	r1, #11
 80a01ba:	4809      	ldr	r0, [pc, #36]	; (80a01e0 <_Z16updating_displayii+0x54>)
 80a01bc:	f000 f9a4 	bl	80a0508 <_ZN7rgb_lcd9setCursorEhh>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a01c0:	2c00      	cmp	r4, #0
 80a01c2:	da0b      	bge.n	80a01dc <_Z16updating_displayii+0x50>
            t = print('-');
 80a01c4:	212d      	movs	r1, #45	; 0x2d
 80a01c6:	4806      	ldr	r0, [pc, #24]	; (80a01e0 <_Z16updating_displayii+0x54>)
 80a01c8:	f001 f87c 	bl	80a12c4 <_ZN5Print5printEc>
            val = -n;
 80a01cc:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a01ce:	220a      	movs	r2, #10
 80a01d0:	4803      	ldr	r0, [pc, #12]	; (80a01e0 <_Z16updating_displayii+0x54>)
  lcd.print(BPM);//bottom line

 80a01d2:	b005      	add	sp, #20
 80a01d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80a01d8:	f001 b88d 	b.w	80a12f6 <_ZN5Print11printNumberEmh>
            val = n;
 80a01dc:	4621      	mov	r1, r4
 80a01de:	e7f6      	b.n	80a01ce <_Z16updating_displayii+0x42>
 80a01e0:	20000868 	.word	0x20000868

080a01e4 <_Z13calculate_bpmv>:
void calculate_bpm(){
 80a01e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  inByte = reading_input_signal();
 80a01e8:	f7ff ffc0 	bl	80a016c <_Z20reading_input_signalv>
 80a01ec:	f002 f97a 	bl	80a24e4 <__aeabi_i2f>
  if (inByte > threshold && belowThreshold == true) { //checking if the signals are within the correct threshold
 80a01f0:	4b2c      	ldr	r3, [pc, #176]	; (80a02a4 <_Z13calculate_bpmv+0xc0>)
  inByte = reading_input_signal();
 80a01f2:	4f2d      	ldr	r7, [pc, #180]	; (80a02a8 <_Z13calculate_bpmv+0xc4>)
  if (inByte > threshold && belowThreshold == true) { //checking if the signals are within the correct threshold
 80a01f4:	681d      	ldr	r5, [r3, #0]
  inByte = reading_input_signal();
 80a01f6:	4604      	mov	r4, r0
  if (inByte > threshold && belowThreshold == true) { //checking if the signals are within the correct threshold
 80a01f8:	4629      	mov	r1, r5
  inByte = reading_input_signal();
 80a01fa:	6038      	str	r0, [r7, #0]
  if (inByte > threshold && belowThreshold == true) { //checking if the signals are within the correct threshold
 80a01fc:	f002 fa32 	bl	80a2664 <__aeabi_fcmpgt>
 80a0200:	2800      	cmp	r0, #0
 80a0202:	d045      	beq.n	80a0290 <_Z13calculate_bpmv+0xac>
 80a0204:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80a02ac <_Z13calculate_bpmv+0xc8>
 80a0208:	f898 3000 	ldrb.w	r3, [r8]
 80a020c:	2b00      	cmp	r3, #0
 80a020e:	d03f      	beq.n	80a0290 <_Z13calculate_bpmv+0xac>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0210:	f000 fa40 	bl	80a0694 <HAL_Timer_Get_Milli_Seconds>
 80a0214:	4606      	mov	r6, r0
    float currentBPM = 60000 / diff;
 80a0216:	f64e 2360 	movw	r3, #60000	; 0xea60
    int diff = beat_new - beat_old;
 80a021a:	f8df b094 	ldr.w	fp, [pc, #148]	; 80a02b0 <_Z13calculate_bpmv+0xcc>
    beats[beatIndex] = currentBPM;
 80a021e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80a02b4 <_Z13calculate_bpmv+0xd0>
    int diff = beat_new - beat_old;
 80a0222:	f8db 0000 	ldr.w	r0, [fp]
    beats[beatIndex] = currentBPM;
 80a0226:	4d24      	ldr	r5, [pc, #144]	; (80a02b8 <_Z13calculate_bpmv+0xd4>)
    int diff = beat_new - beat_old;
 80a0228:	1a30      	subs	r0, r6, r0
    float currentBPM = 60000 / diff;
 80a022a:	fb93 f0f0 	sdiv	r0, r3, r0
 80a022e:	f002 f959 	bl	80a24e4 <__aeabi_i2f>
    beats[beatIndex] = currentBPM;
 80a0232:	f8d9 4000 	ldr.w	r4, [r9]
 80a0236:	46aa      	mov	sl, r5
    float currentBPM = 60000 / diff;
 80a0238:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    float total = 0.0;
 80a023c:	2300      	movs	r3, #0
    for (int i = 0; i < 60; i++) { 
 80a023e:	2500      	movs	r5, #0
        total += beats[i];
 80a0240:	4618      	mov	r0, r3
 80a0242:	f85a 1b04 	ldr.w	r1, [sl], #4
 80a0246:	f002 f899 	bl	80a237c <__addsf3>
    for (int i = 0; i < 60; i++) { 
 80a024a:	3501      	adds	r5, #1
 80a024c:	2d3c      	cmp	r5, #60	; 0x3c
        total += beats[i];
 80a024e:	4603      	mov	r3, r0
    for (int i = 0; i < 60; i++) { 
 80a0250:	d1f6      	bne.n	80a0240 <_Z13calculate_bpmv+0x5c>
    beatIndex = (beatIndex + 1) % 60; //average beats per minute over 500 seconds.
 80a0252:	3401      	adds	r4, #1
 80a0254:	fb94 f3f5 	sdiv	r3, r4, r5
 80a0258:	fb05 4413 	mls	r4, r5, r3, r4
    beat_old = beat_new;
 80a025c:	f8cb 6000 	str.w	r6, [fp]
    beatIndex = (beatIndex + 1) % 60; //average beats per minute over 500 seconds.
 80a0260:	f8c9 4000 	str.w	r4, [r9]
    BPM = total / 60.0;
 80a0264:	f001 fdf2 	bl	80a1e4c <__aeabi_f2d>
 80a0268:	4b14      	ldr	r3, [pc, #80]	; (80a02bc <_Z13calculate_bpmv+0xd8>)
 80a026a:	2200      	movs	r2, #0
 80a026c:	f001 ff70 	bl	80a2150 <__aeabi_ddiv>
 80a0270:	f002 f856 	bl	80a2320 <__aeabi_d2iz>
 80a0274:	4b12      	ldr	r3, [pc, #72]	; (80a02c0 <_Z13calculate_bpmv+0xdc>)
 80a0276:	6018      	str	r0, [r3, #0]
    belowThreshold = false;
 80a0278:	2300      	movs	r3, #0
 80a027a:	f888 3000 	strb.w	r3, [r8]
  updating_display(inByte, BPM);  //updates on the screen 
 80a027e:	6838      	ldr	r0, [r7, #0]
 80a0280:	f002 f9fa 	bl	80a2678 <__aeabi_f2iz>
 80a0284:	4b0e      	ldr	r3, [pc, #56]	; (80a02c0 <_Z13calculate_bpmv+0xdc>)
 80a0286:	6819      	ldr	r1, [r3, #0]
}
 80a0288:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  updating_display(inByte, BPM);  //updates on the screen 
 80a028c:	f7ff bf7e 	b.w	80a018c <_Z16updating_displayii>
  else if (inByte < threshold){ //if our input signal is under the threshold, it'll wait until we detect a proper heartbeat.
 80a0290:	4629      	mov	r1, r5
 80a0292:	4620      	mov	r0, r4
 80a0294:	f002 f9c8 	bl	80a2628 <__aeabi_fcmplt>
 80a0298:	2800      	cmp	r0, #0
 80a029a:	d0f0      	beq.n	80a027e <_Z13calculate_bpmv+0x9a>
    belowThreshold = true;
 80a029c:	2201      	movs	r2, #1
 80a029e:	4b03      	ldr	r3, [pc, #12]	; (80a02ac <_Z13calculate_bpmv+0xc8>)
 80a02a0:	701a      	strb	r2, [r3, #0]
 80a02a2:	e7ec      	b.n	80a027e <_Z13calculate_bpmv+0x9a>
 80a02a4:	2000000c 	.word	0x2000000c
 80a02a8:	2000085c 	.word	0x2000085c
 80a02ac:	20000000 	.word	0x20000000
 80a02b0:	20000088 	.word	0x20000088
 80a02b4:	20000084 	.word	0x20000084
 80a02b8:	2000008c 	.word	0x2000008c
 80a02bc:	404e0000 	.word	0x404e0000
 80a02c0:	2000007c 	.word	0x2000007c

080a02c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a02c4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a02c6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a02c8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a02ca:	b17c      	cbz	r4, 80a02ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a02cc:	6863      	ldr	r3, [r4, #4]
 80a02ce:	3b01      	subs	r3, #1
 80a02d0:	6063      	str	r3, [r4, #4]
 80a02d2:	b95b      	cbnz	r3, 80a02ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a02d4:	6823      	ldr	r3, [r4, #0]
 80a02d6:	4620      	mov	r0, r4
 80a02d8:	689b      	ldr	r3, [r3, #8]
 80a02da:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a02dc:	68a3      	ldr	r3, [r4, #8]
 80a02de:	3b01      	subs	r3, #1
 80a02e0:	60a3      	str	r3, [r4, #8]
 80a02e2:	b91b      	cbnz	r3, 80a02ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a02e4:	6823      	ldr	r3, [r4, #0]
 80a02e6:	4620      	mov	r0, r4
 80a02e8:	68db      	ldr	r3, [r3, #12]
 80a02ea:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a02ec:	4628      	mov	r0, r5
 80a02ee:	bd38      	pop	{r3, r4, r5, pc}

080a02f0 <loop>:
void loop() {
 80a02f0:	b570      	push	{r4, r5, r6, lr}
 if (digitalRead(D5)==0 && prevSwitch == TRUE){
 80a02f2:	2005      	movs	r0, #5
void loop() {
 80a02f4:	b088      	sub	sp, #32
 if (digitalRead(D5)==0 && prevSwitch == TRUE){
 80a02f6:	f001 fb8c 	bl	80a1a12 <digitalRead>
 80a02fa:	4604      	mov	r4, r0
 80a02fc:	b950      	cbnz	r0, 80a0314 <loop+0x24>
 80a02fe:	4d44      	ldr	r5, [pc, #272]	; (80a0410 <loop+0x120>)
 80a0300:	782b      	ldrb	r3, [r5, #0]
 80a0302:	b13b      	cbz	r3, 80a0314 <loop+0x24>
  lcd.setRGB(122, 122, 122);
 80a0304:	237a      	movs	r3, #122	; 0x7a
  lcd.setRGB(0, 122, 0);
 80a0306:	227a      	movs	r2, #122	; 0x7a
 80a0308:	4619      	mov	r1, r3
 80a030a:	4842      	ldr	r0, [pc, #264]	; (80a0414 <loop+0x124>)
 80a030c:	f000 f931 	bl	80a0572 <_ZN7rgb_lcd6setRGBEhhh>
  prevSwitch = TRUE;
 80a0310:	702c      	strb	r4, [r5, #0]
 80a0312:	e009      	b.n	80a0328 <loop+0x38>
 else if (digitalRead(D5) == 1 && prevSwitch == FALSE){
 80a0314:	2005      	movs	r0, #5
 80a0316:	f001 fb7c 	bl	80a1a12 <digitalRead>
 80a031a:	2801      	cmp	r0, #1
 80a031c:	4604      	mov	r4, r0
 80a031e:	d103      	bne.n	80a0328 <loop+0x38>
 80a0320:	4d3b      	ldr	r5, [pc, #236]	; (80a0410 <loop+0x120>)
 80a0322:	782b      	ldrb	r3, [r5, #0]
 80a0324:	2b00      	cmp	r3, #0
 80a0326:	d0ee      	beq.n	80a0306 <loop+0x16>
  if ((digitalRead(D4) == 1) || (digitalRead(D2) == 1)) { // if the leads are taking in input but one of them is faulty, data is not being read properly
 80a0328:	2004      	movs	r0, #4
 80a032a:	f001 fb72 	bl	80a1a12 <digitalRead>
 80a032e:	2801      	cmp	r0, #1
 80a0330:	d062      	beq.n	80a03f8 <loop+0x108>
 80a0332:	2002      	movs	r0, #2
 80a0334:	f001 fb6d 	bl	80a1a12 <digitalRead>
 80a0338:	2801      	cmp	r0, #1
 80a033a:	d05d      	beq.n	80a03f8 <loop+0x108>
    Serial.println(analogRead(A0)); // or else read the data (bpm)
 80a033c:	f001 f954 	bl	80a15e8 <_Z16_fetch_usbserialv>
 80a0340:	4605      	mov	r5, r0
 80a0342:	200a      	movs	r0, #10
 80a0344:	f001 fb78 	bl	80a1a38 <analogRead>
        if (n < 0 && base == 10) {
 80a0348:	1e04      	subs	r4, r0, #0
 80a034a:	da53      	bge.n	80a03f4 <loop+0x104>
            t = print('-');
 80a034c:	212d      	movs	r1, #45	; 0x2d
 80a034e:	4628      	mov	r0, r5
 80a0350:	f000 ffb8 	bl	80a12c4 <_ZN5Print5printEc>
            val = -n;
 80a0354:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a0356:	220a      	movs	r2, #10
 80a0358:	4628      	mov	r0, r5
 80a035a:	f000 ffcc 	bl	80a12f6 <_ZN5Print11printNumberEmh>
        n += println();
 80a035e:	4628      	mov	r0, r5
 80a0360:	f000 ffb3 	bl	80a12ca <_ZN5Print7printlnEv>
  delay(125);
 80a0364:	207d      	movs	r0, #125	; 0x7d
 80a0366:	f000 fb8b 	bl	80a0a80 <delay>
  inByte = analogRead(sensorPin);  //read the A0 pin 
 80a036a:	4b2b      	ldr	r3, [pc, #172]	; (80a0418 <loop+0x128>)
  if (millis() - lastTime >= displayDelay) { //calculate the bpm calculation at a regular interval
 80a036c:	4c2b      	ldr	r4, [pc, #172]	; (80a041c <loop+0x12c>)
  inByte = analogRead(sensorPin);  //read the A0 pin 
 80a036e:	8818      	ldrh	r0, [r3, #0]
 80a0370:	f001 fb62 	bl	80a1a38 <analogRead>
 80a0374:	f002 f8b6 	bl	80a24e4 <__aeabi_i2f>
 80a0378:	4b29      	ldr	r3, [pc, #164]	; (80a0420 <loop+0x130>)
 80a037a:	6018      	str	r0, [r3, #0]
 80a037c:	f000 f98a 	bl	80a0694 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTime >= displayDelay) { //calculate the bpm calculation at a regular interval
 80a0380:	6823      	ldr	r3, [r4, #0]
 80a0382:	1ac0      	subs	r0, r0, r3
 80a0384:	4b27      	ldr	r3, [pc, #156]	; (80a0424 <loop+0x134>)
 80a0386:	681b      	ldr	r3, [r3, #0]
 80a0388:	4298      	cmp	r0, r3
 80a038a:	d304      	bcc.n	80a0396 <loop+0xa6>
 80a038c:	f000 f982 	bl	80a0694 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
 80a0390:	6020      	str	r0, [r4, #0]
    calculate_bpm();
 80a0392:	f7ff ff27 	bl	80a01e4 <_Z13calculate_bpmv>
 String dataBPM = String(BPM);
 80a0396:	4b24      	ldr	r3, [pc, #144]	; (80a0428 <loop+0x138>)
 80a0398:	220a      	movs	r2, #10
 80a039a:	6819      	ldr	r1, [r3, #0]
 80a039c:	a804      	add	r0, sp, #16
 80a039e:	f001 f837 	bl	80a1410 <_ZN6StringC1Eih>
 80a03a2:	f000 f977 	bl	80a0694 <HAL_Timer_Get_Milli_Seconds>
    if (nextTime < currentTime) {
 80a03a6:	4d21      	ldr	r5, [pc, #132]	; (80a042c <loop+0x13c>)
 80a03a8:	4604      	mov	r4, r0
 80a03aa:	682b      	ldr	r3, [r5, #0]
 80a03ac:	4283      	cmp	r3, r0
 80a03ae:	da1c      	bge.n	80a03ea <loop+0xfa>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a03b0:	4e1f      	ldr	r6, [pc, #124]	; (80a0430 <loop+0x140>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a03b2:	9a04      	ldr	r2, [sp, #16]
 80a03b4:	7833      	ldrb	r3, [r6, #0]
 80a03b6:	491f      	ldr	r1, [pc, #124]	; (80a0434 <loop+0x144>)
 80a03b8:	f88d 3000 	strb.w	r3, [sp]
 80a03bc:	a802      	add	r0, sp, #8
 80a03be:	233c      	movs	r3, #60	; 0x3c
 80a03c0:	f000 fcba 	bl	80a0d38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a03c4:	a803      	add	r0, sp, #12
 80a03c6:	f7ff ff7d 	bl	80a02c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a03ca:	7833      	ldrb	r3, [r6, #0]
 80a03cc:	9a04      	ldr	r2, [sp, #16]
 80a03ce:	491a      	ldr	r1, [pc, #104]	; (80a0438 <loop+0x148>)
 80a03d0:	f88d 3000 	strb.w	r3, [sp]
 80a03d4:	a802      	add	r0, sp, #8
 80a03d6:	233c      	movs	r3, #60	; 0x3c
        nextTime = currentTime + 15000;
 80a03d8:	f504 546a 	add.w	r4, r4, #14976	; 0x3a80
 80a03dc:	f000 fcac 	bl	80a0d38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a03e0:	3418      	adds	r4, #24
 80a03e2:	a803      	add	r0, sp, #12
 80a03e4:	f7ff ff6e 	bl	80a02c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a03e8:	602c      	str	r4, [r5, #0]
 String dataBPM = String(BPM);
 80a03ea:	a804      	add	r0, sp, #16
 80a03ec:	f000 ffb5 	bl	80a135a <_ZN6StringD1Ev>
}
 80a03f0:	b008      	add	sp, #32
 80a03f2:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 80a03f4:	4621      	mov	r1, r4
 80a03f6:	e7ae      	b.n	80a0356 <loop+0x66>
    Serial.println("Data not being read properly");
 80a03f8:	f001 f8f6 	bl	80a15e8 <_Z16_fetch_usbserialv>
 80a03fc:	490f      	ldr	r1, [pc, #60]	; (80a043c <loop+0x14c>)
 80a03fe:	f000 ff70 	bl	80a12e2 <_ZN5Print7printlnEPKc>
    lcd.setCursor(0,1);
 80a0402:	2201      	movs	r2, #1
 80a0404:	2100      	movs	r1, #0
 80a0406:	4803      	ldr	r0, [pc, #12]	; (80a0414 <loop+0x124>)
 80a0408:	f000 f87e 	bl	80a0508 <_ZN7rgb_lcd9setCursorEhh>
 80a040c:	e7aa      	b.n	80a0364 <loop+0x74>
 80a040e:	bf00      	nop
 80a0410:	2000087c 	.word	0x2000087c
 80a0414:	20000868 	.word	0x20000868
 80a0418:	20000008 	.word	0x20000008
 80a041c:	20000864 	.word	0x20000864
 80a0420:	2000085c 	.word	0x2000085c
 80a0424:	20000004 	.word	0x20000004
 80a0428:	2000007c 	.word	0x2000007c
 80a042c:	20000878 	.word	0x20000878
 80a0430:	20000080 	.word	0x20000080
 80a0434:	080a28c6 	.word	0x080a28c6
 80a0438:	080a28d0 	.word	0x080a28d0
 80a043c:	080a28a9 	.word	0x080a28a9

080a0440 <_GLOBAL__sub_I_lcd>:
        val_(val) {
 80a0440:	2200      	movs	r2, #0
 80a0442:	b508      	push	{r3, lr}
 80a0444:	4b06      	ldr	r3, [pc, #24]	; (80a0460 <_GLOBAL__sub_I_lcd+0x20>)
rgb_lcd lcd;
 80a0446:	4807      	ldr	r0, [pc, #28]	; (80a0464 <_GLOBAL__sub_I_lcd+0x24>)
 80a0448:	701a      	strb	r2, [r3, #0]
 80a044a:	f000 f84b 	bl	80a04e4 <_ZN7rgb_lcdC1Ev>
 80a044e:	f000 f921 	bl	80a0694 <HAL_Timer_Get_Milli_Seconds>
int nextTime = millis() + 15000;
 80a0452:	4b05      	ldr	r3, [pc, #20]	; (80a0468 <_GLOBAL__sub_I_lcd+0x28>)
 80a0454:	f500 506a 	add.w	r0, r0, #14976	; 0x3a80
 80a0458:	3018      	adds	r0, #24
 80a045a:	6018      	str	r0, [r3, #0]
 80a045c:	bd08      	pop	{r3, pc}
 80a045e:	bf00      	nop
 80a0460:	20000080 	.word	0x20000080
 80a0464:	20000868 	.word	0x20000868
 80a0468:	20000878 	.word	0x20000878

080a046c <_ZN7rgb_lcdD1Ev>:
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class rgb_lcd : public Print 
 80a046c:	4770      	bx	lr

080a046e <_ZN7rgb_lcdD0Ev>:
 80a046e:	b510      	push	{r4, lr}
 80a0470:	4604      	mov	r4, r0
 80a0472:	2110      	movs	r1, #16
 80a0474:	f7ff fe13 	bl	80a009e <_ZdlPvj>
 80a0478:	4620      	mov	r0, r4
 80a047a:	bd10      	pop	{r4, pc}

080a047c <_Z14i2c_send_byteSPhh>:
    Wire.write(dta);                            // sends five bytes
    Wire.endTransmission();                     // stop transmitting
}

void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 80a047c:	b570      	push	{r4, r5, r6, lr}
 80a047e:	460e      	mov	r6, r1
 80a0480:	4605      	mov	r5, r0
    Wire.beginTransmission(LCD_ADDRESS);        // transmit to device #4
 80a0482:	f001 fb07 	bl	80a1a94 <_Z19__fetch_global_Wirev>
 80a0486:	213e      	movs	r1, #62	; 0x3e
 80a0488:	f000 fe0e 	bl	80a10a8 <_ZN7TwoWire17beginTransmissionEi>
    for(int i=0; i<len; i++)
 80a048c:	2400      	movs	r4, #0
 80a048e:	42a6      	cmp	r6, r4
 80a0490:	dd07      	ble.n	80a04a2 <_Z14i2c_send_byteSPhh+0x26>
    {
        Wire.write(dta[i]);
 80a0492:	f001 faff 	bl	80a1a94 <_Z19__fetch_global_Wirev>
 80a0496:	6803      	ldr	r3, [r0, #0]
 80a0498:	5d29      	ldrb	r1, [r5, r4]
 80a049a:	689b      	ldr	r3, [r3, #8]
 80a049c:	4798      	blx	r3
    for(int i=0; i<len; i++)
 80a049e:	3401      	adds	r4, #1
 80a04a0:	e7f5      	b.n	80a048e <_Z14i2c_send_byteSPhh+0x12>
    }
    Wire.endTransmission();                     // stop transmitting
 80a04a2:	f001 faf7 	bl	80a1a94 <_Z19__fetch_global_Wirev>
}
 80a04a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();                     // stop transmitting
 80a04aa:	f000 be04 	b.w	80a10b6 <_ZN7TwoWire15endTransmissionEv>

080a04ae <_ZN7rgb_lcd5writeEh>:

// send data
inline size_t rgb_lcd::write(uint8_t value)
{

    unsigned char dta[2] = {0x40, value};
 80a04ae:	2340      	movs	r3, #64	; 0x40
{
 80a04b0:	b507      	push	{r0, r1, r2, lr}
    unsigned char dta[2] = {0x40, value};
 80a04b2:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a04b6:	a801      	add	r0, sp, #4
 80a04b8:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x40, value};
 80a04ba:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a04be:	f7ff ffdd 	bl	80a047c <_Z14i2c_send_byteSPhh>
    return 1; // assume sucess
}
 80a04c2:	2001      	movs	r0, #1
 80a04c4:	b003      	add	sp, #12
 80a04c6:	f85d fb04 	ldr.w	pc, [sp], #4

080a04ca <_ZN7rgb_lcd7commandEh.constprop.0>:
    unsigned char dta[2] = {0x80, value};
 80a04ca:	2380      	movs	r3, #128	; 0x80
inline void rgb_lcd::command(uint8_t value)
 80a04cc:	b507      	push	{r0, r1, r2, lr}
    i2c_send_byteS(dta, 2);
 80a04ce:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, value};
 80a04d0:	f88d 0005 	strb.w	r0, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a04d4:	a801      	add	r0, sp, #4
    unsigned char dta[2] = {0x80, value};
 80a04d6:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a04da:	f7ff ffcf 	bl	80a047c <_Z14i2c_send_byteSPhh>
}
 80a04de:	b003      	add	sp, #12
 80a04e0:	f85d fb04 	ldr.w	pc, [sp], #4

080a04e4 <_ZN7rgb_lcdC1Ev>:
    Print() : write_error(0) {}
 80a04e4:	2200      	movs	r2, #0
 80a04e6:	6042      	str	r2, [r0, #4]
rgb_lcd::rgb_lcd()
 80a04e8:	4a01      	ldr	r2, [pc, #4]	; (80a04f0 <_ZN7rgb_lcdC1Ev+0xc>)
 80a04ea:	6002      	str	r2, [r0, #0]
}
 80a04ec:	4770      	bx	lr
 80a04ee:	bf00      	nop
 80a04f0:	080a28e4 	.word	0x080a28e4

080a04f4 <_ZN7rgb_lcd5clearEv>:
{
 80a04f4:	b508      	push	{r3, lr}
    command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80a04f6:	2001      	movs	r0, #1
 80a04f8:	f7ff ffe7 	bl	80a04ca <_ZN7rgb_lcd7commandEh.constprop.0>
}
 80a04fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0500:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0504:	f000 b8be 	b.w	80a0684 <HAL_Delay_Microseconds>

080a0508 <_ZN7rgb_lcd9setCursorEhh>:
{
 80a0508:	b507      	push	{r0, r1, r2, lr}
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a050a:	b96a      	cbnz	r2, 80a0528 <_ZN7rgb_lcd9setCursorEhh+0x20>
 80a050c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    unsigned char dta[2] = {0x80, col};
 80a0510:	2380      	movs	r3, #128	; 0x80
 80a0512:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a0516:	a801      	add	r0, sp, #4
 80a0518:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, col};
 80a051a:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a051e:	f7ff ffad 	bl	80a047c <_Z14i2c_send_byteSPhh>
}
 80a0522:	b003      	add	sp, #12
 80a0524:	f85d fb04 	ldr.w	pc, [sp], #4
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a0528:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80a052c:	e7f0      	b.n	80a0510 <_ZN7rgb_lcd9setCursorEhh+0x8>

080a052e <_ZN7rgb_lcd7displayEv>:
    _displaycontrol |= LCD_DISPLAYON;
 80a052e:	7a43      	ldrb	r3, [r0, #9]
 80a0530:	f043 0204 	orr.w	r2, r3, #4
 80a0534:	7242      	strb	r2, [r0, #9]
    command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a0536:	f043 000c 	orr.w	r0, r3, #12
 80a053a:	f7ff bfc6 	b.w	80a04ca <_ZN7rgb_lcd7commandEh.constprop.0>

080a053e <_ZN7rgb_lcd6setRegEhh>:

void rgb_lcd::setReg(unsigned char addr, unsigned char dta)
{
 80a053e:	b538      	push	{r3, r4, r5, lr}
 80a0540:	4614      	mov	r4, r2
 80a0542:	460d      	mov	r5, r1
    Wire.beginTransmission(RGB_ADDRESS); // transmit to device #4
 80a0544:	f001 faa6 	bl	80a1a94 <_Z19__fetch_global_Wirev>
 80a0548:	2162      	movs	r1, #98	; 0x62
 80a054a:	f000 fdad 	bl	80a10a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(addr);
 80a054e:	f001 faa1 	bl	80a1a94 <_Z19__fetch_global_Wirev>
 80a0552:	6803      	ldr	r3, [r0, #0]
 80a0554:	4629      	mov	r1, r5
 80a0556:	689b      	ldr	r3, [r3, #8]
 80a0558:	4798      	blx	r3
    Wire.write(dta);
 80a055a:	f001 fa9b 	bl	80a1a94 <_Z19__fetch_global_Wirev>
 80a055e:	6803      	ldr	r3, [r0, #0]
 80a0560:	4621      	mov	r1, r4
 80a0562:	689b      	ldr	r3, [r3, #8]
 80a0564:	4798      	blx	r3
    Wire.endTransmission();    // stop transmitting
 80a0566:	f001 fa95 	bl	80a1a94 <_Z19__fetch_global_Wirev>
}
 80a056a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();    // stop transmitting
 80a056e:	f000 bda2 	b.w	80a10b6 <_ZN7TwoWire15endTransmissionEv>

080a0572 <_ZN7rgb_lcd6setRGBEhhh>:

void rgb_lcd::setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 80a0572:	b570      	push	{r4, r5, r6, lr}
 80a0574:	4604      	mov	r4, r0
 80a0576:	4616      	mov	r6, r2
 80a0578:	461d      	mov	r5, r3
    setReg(REG_RED, r);
 80a057a:	460a      	mov	r2, r1
 80a057c:	2104      	movs	r1, #4
 80a057e:	f7ff ffde 	bl	80a053e <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_GREEN, g);
 80a0582:	4632      	mov	r2, r6
 80a0584:	4620      	mov	r0, r4
 80a0586:	2103      	movs	r1, #3
 80a0588:	f7ff ffd9 	bl	80a053e <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_BLUE, b);
 80a058c:	462a      	mov	r2, r5
 80a058e:	4620      	mov	r0, r4
}
 80a0590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setReg(REG_BLUE, b);
 80a0594:	2102      	movs	r1, #2
 80a0596:	f7ff bfd2 	b.w	80a053e <_ZN7rgb_lcd6setRegEhh>

080a059a <_ZN7rgb_lcd5beginEhhh>:
{
 80a059a:	b570      	push	{r4, r5, r6, lr}
 80a059c:	4615      	mov	r5, r2
 80a059e:	4604      	mov	r4, r0
 80a05a0:	461e      	mov	r6, r3
    Wire.begin();
 80a05a2:	f001 fa77 	bl	80a1a94 <_Z19__fetch_global_Wirev>
 80a05a6:	f000 fd75 	bl	80a1094 <_ZN7TwoWire5beginEv>
    if (lines > 1) {
 80a05aa:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_2LINE;
 80a05ac:	bf88      	it	hi
 80a05ae:	7a23      	ldrbhi	r3, [r4, #8]
    _numlines = lines;
 80a05b0:	7325      	strb	r5, [r4, #12]
        _displayfunction |= LCD_2LINE;
 80a05b2:	bf84      	itt	hi
 80a05b4:	f043 0308 	orrhi.w	r3, r3, #8
 80a05b8:	7223      	strbhi	r3, [r4, #8]
    _currline = 0;
 80a05ba:	2300      	movs	r3, #0
 80a05bc:	7363      	strb	r3, [r4, #13]
    if ((dotsize != 0) && (lines == 1)) {
 80a05be:	b12e      	cbz	r6, 80a05cc <_ZN7rgb_lcd5beginEhhh+0x32>
 80a05c0:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_5x10DOTS;
 80a05c2:	bf02      	ittt	eq
 80a05c4:	7a23      	ldrbeq	r3, [r4, #8]
 80a05c6:	f043 0304 	orreq.w	r3, r3, #4
 80a05ca:	7223      	strbeq	r3, [r4, #8]
 80a05cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80a05d0:	f000 f858 	bl	80a0684 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a05d4:	7a20      	ldrb	r0, [r4, #8]
 80a05d6:	f040 0020 	orr.w	r0, r0, #32
 80a05da:	f7ff ff76 	bl	80a04ca <_ZN7rgb_lcd7commandEh.constprop.0>
 80a05de:	f241 1094 	movw	r0, #4500	; 0x1194
 80a05e2:	f000 f84f 	bl	80a0684 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a05e6:	7a20      	ldrb	r0, [r4, #8]
 80a05e8:	f040 0020 	orr.w	r0, r0, #32
 80a05ec:	f7ff ff6d 	bl	80a04ca <_ZN7rgb_lcd7commandEh.constprop.0>
 80a05f0:	2096      	movs	r0, #150	; 0x96
 80a05f2:	f000 f847 	bl	80a0684 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a05f6:	7a20      	ldrb	r0, [r4, #8]
 80a05f8:	f040 0020 	orr.w	r0, r0, #32
 80a05fc:	f7ff ff65 	bl	80a04ca <_ZN7rgb_lcd7commandEh.constprop.0>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a0600:	7a20      	ldrb	r0, [r4, #8]
 80a0602:	f040 0020 	orr.w	r0, r0, #32
 80a0606:	f7ff ff60 	bl	80a04ca <_ZN7rgb_lcd7commandEh.constprop.0>
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a060a:	2304      	movs	r3, #4
    display();
 80a060c:	4620      	mov	r0, r4
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a060e:	7263      	strb	r3, [r4, #9]
    display();
 80a0610:	f7ff ff8d 	bl	80a052e <_ZN7rgb_lcd7displayEv>
    clear();
 80a0614:	4620      	mov	r0, r4
 80a0616:	f7ff ff6d 	bl	80a04f4 <_ZN7rgb_lcd5clearEv>
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a061a:	2302      	movs	r3, #2
    command(LCD_ENTRYMODESET | _displaymode);
 80a061c:	2006      	movs	r0, #6
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a061e:	72a3      	strb	r3, [r4, #10]
    command(LCD_ENTRYMODESET | _displaymode);
 80a0620:	f7ff ff53 	bl	80a04ca <_ZN7rgb_lcd7commandEh.constprop.0>
    setReg(0, 0);
 80a0624:	2200      	movs	r2, #0
 80a0626:	4620      	mov	r0, r4
 80a0628:	4611      	mov	r1, r2
 80a062a:	f7ff ff88 	bl	80a053e <_ZN7rgb_lcd6setRegEhh>
    setReg(1, 0);
 80a062e:	4620      	mov	r0, r4
 80a0630:	2200      	movs	r2, #0
 80a0632:	2101      	movs	r1, #1
 80a0634:	f7ff ff83 	bl	80a053e <_ZN7rgb_lcd6setRegEhh>
    setReg(0x08, 0xAA);     // all led control by pwm
 80a0638:	4620      	mov	r0, r4
 80a063a:	22aa      	movs	r2, #170	; 0xaa
 80a063c:	2108      	movs	r1, #8
 80a063e:	f7ff ff7e 	bl	80a053e <_ZN7rgb_lcd6setRegEhh>
  void setRGB(unsigned char r, unsigned char g, unsigned char b);               // set rgb
  void setPWM(unsigned char color, unsigned char pwm){setReg(color, pwm);}      // set pwm
  
  void setColor(unsigned char color);
  void setColorAll(){setRGB(0, 0, 0);}
  void setColorWhite(){setRGB(255, 255, 255);}
 80a0642:	23ff      	movs	r3, #255	; 0xff
 80a0644:	4620      	mov	r0, r4
}
 80a0646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a064a:	461a      	mov	r2, r3
 80a064c:	4619      	mov	r1, r3
 80a064e:	f7ff bf90 	b.w	80a0572 <_ZN7rgb_lcd6setRGBEhhh>
	...

080a0654 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <os_mutex_recursive_create+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601d0 	.word	0x080601d0

080a0664 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <os_mutex_recursive_destroy+0xc>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a066c:	9301      	str	r3, [sp, #4]
 80a066e:	bd08      	pop	{r3, pc}
 80a0670:	080601d0 	.word	0x080601d0

080a0674 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <HAL_RNG_GetRandomNumber+0xc>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	685b      	ldr	r3, [r3, #4]
 80a067c:	9301      	str	r3, [sp, #4]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	0806019c 	.word	0x0806019c

080a0684 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <HAL_Delay_Microseconds+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	68db      	ldr	r3, [r3, #12]
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	0806019c 	.word	0x0806019c

080a0694 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	695b      	ldr	r3, [r3, #20]
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	0806019c 	.word	0x0806019c

080a06a4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <HAL_Validate_Pin_Function+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	685b      	ldr	r3, [r3, #4]
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601b0 	.word	0x080601b0

080a06b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <HAL_Pin_Mode+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	689b      	ldr	r3, [r3, #8]
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601b0 	.word	0x080601b0

080a06c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <HAL_Get_Pin_Mode+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	68db      	ldr	r3, [r3, #12]
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	080601b0 	.word	0x080601b0

080a06d4 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <HAL_GPIO_Read+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	695b      	ldr	r3, [r3, #20]
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	080601b0 	.word	0x080601b0

080a06e4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <hal_adc_read+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	080601b0 	.word	0x080601b0

080a06f4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <hal_i2c_begin+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	080601ac 	.word	0x080601ac

080a0704 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <hal_i2c_begin_transmission+0xc>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a070c:	9301      	str	r3, [sp, #4]
 80a070e:	bd08      	pop	{r3, pc}
 80a0710:	080601ac 	.word	0x080601ac

080a0714 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0714:	b508      	push	{r3, lr}
 80a0716:	4b02      	ldr	r3, [pc, #8]	; (80a0720 <hal_i2c_end_transmission+0xc>)
 80a0718:	681b      	ldr	r3, [r3, #0]
 80a071a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a071c:	9301      	str	r3, [sp, #4]
 80a071e:	bd08      	pop	{r3, pc}
 80a0720:	080601ac 	.word	0x080601ac

080a0724 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0724:	b508      	push	{r3, lr}
 80a0726:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <hal_i2c_write+0xc>)
 80a0728:	681b      	ldr	r3, [r3, #0]
 80a072a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a072c:	9301      	str	r3, [sp, #4]
 80a072e:	bd08      	pop	{r3, pc}
 80a0730:	080601ac 	.word	0x080601ac

080a0734 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <hal_i2c_available+0xc>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a073c:	9301      	str	r3, [sp, #4]
 80a073e:	bd08      	pop	{r3, pc}
 80a0740:	080601ac 	.word	0x080601ac

080a0744 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0744:	b508      	push	{r3, lr}
 80a0746:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <hal_i2c_read+0xc>)
 80a0748:	681b      	ldr	r3, [r3, #0]
 80a074a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a074c:	9301      	str	r3, [sp, #4]
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	080601ac 	.word	0x080601ac

080a0754 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0754:	b508      	push	{r3, lr}
 80a0756:	4b02      	ldr	r3, [pc, #8]	; (80a0760 <hal_i2c_peek+0xc>)
 80a0758:	681b      	ldr	r3, [r3, #0]
 80a075a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a075c:	9301      	str	r3, [sp, #4]
 80a075e:	bd08      	pop	{r3, pc}
 80a0760:	080601ac 	.word	0x080601ac

080a0764 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0764:	b508      	push	{r3, lr}
 80a0766:	4b02      	ldr	r3, [pc, #8]	; (80a0770 <hal_i2c_flush+0xc>)
 80a0768:	681b      	ldr	r3, [r3, #0]
 80a076a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a076c:	9301      	str	r3, [sp, #4]
 80a076e:	bd08      	pop	{r3, pc}
 80a0770:	080601ac 	.word	0x080601ac

080a0774 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0774:	b508      	push	{r3, lr}
 80a0776:	4b02      	ldr	r3, [pc, #8]	; (80a0780 <hal_i2c_is_enabled+0xc>)
 80a0778:	681b      	ldr	r3, [r3, #0]
 80a077a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a077c:	9301      	str	r3, [sp, #4]
 80a077e:	bd08      	pop	{r3, pc}
 80a0780:	080601ac 	.word	0x080601ac

080a0784 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0784:	b508      	push	{r3, lr}
 80a0786:	4b03      	ldr	r3, [pc, #12]	; (80a0794 <hal_i2c_init+0x10>)
 80a0788:	681b      	ldr	r3, [r3, #0]
 80a078a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a078e:	9301      	str	r3, [sp, #4]
 80a0790:	bd08      	pop	{r3, pc}
 80a0792:	0000      	.short	0x0000
 80a0794:	080601ac 	.word	0x080601ac

080a0798 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0798:	b508      	push	{r3, lr}
 80a079a:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <hal_spi_init+0xc>)
 80a079c:	681b      	ldr	r3, [r3, #0]
 80a079e:	69db      	ldr	r3, [r3, #28]
 80a07a0:	9301      	str	r3, [sp, #4]
 80a07a2:	bd08      	pop	{r3, pc}
 80a07a4:	080601b4 	.word	0x080601b4

080a07a8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <hal_spi_is_enabled+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	6a1b      	ldr	r3, [r3, #32]
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601b4 	.word	0x080601b4

080a07b8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <hal_usart_write+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601c4 	.word	0x080601c4

080a07c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <hal_usart_available+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601c4 	.word	0x080601c4

080a07d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <hal_usart_read+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	080601c4 	.word	0x080601c4

080a07e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <hal_usart_peek+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	080601c4 	.word	0x080601c4

080a07f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <hal_usart_flush+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601c4 	.word	0x080601c4

080a0808 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <hal_usart_is_enabled+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601c4 	.word	0x080601c4

080a0818 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <hal_usart_available_data_for_write+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601c4 	.word	0x080601c4

080a0828 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <hal_usart_init_ex+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601c4 	.word	0x080601c4

080a0838 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <HAL_USB_USART_Init+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	681b      	ldr	r3, [r3, #0]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601d8 	.word	0x080601d8

080a0848 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <HAL_USB_USART_Begin+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	685b      	ldr	r3, [r3, #4]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601d8 	.word	0x080601d8

080a0858 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <HAL_USB_USART_Available_Data+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	691b      	ldr	r3, [r3, #16]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601d8 	.word	0x080601d8

080a0868 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	695b      	ldr	r3, [r3, #20]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601d8 	.word	0x080601d8

080a0878 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <HAL_USB_USART_Receive_Data+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	699b      	ldr	r3, [r3, #24]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601d8 	.word	0x080601d8

080a0888 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <HAL_USB_USART_Send_Data+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	69db      	ldr	r3, [r3, #28]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601d8 	.word	0x080601d8

080a0898 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <HAL_USB_USART_Flush_Data+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	6a1b      	ldr	r3, [r3, #32]
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601d8 	.word	0x080601d8

080a08a8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <inet_gethostbyname+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601c0 	.word	0x080601c0

080a08b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <set_system_mode+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	685b      	ldr	r3, [r3, #4]
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601a4 	.word	0x080601a4

080a08c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <system_delay_ms+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	695b      	ldr	r3, [r3, #20]
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601a4 	.word	0x080601a4

080a08d8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <application_thread_current+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601a4 	.word	0x080601a4

080a08e8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <application_thread_invoke+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601a4 	.word	0x080601a4

080a08f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b03      	ldr	r3, [pc, #12]	; (80a0908 <system_ctrl_set_app_request_handler+0x10>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0902:	9301      	str	r3, [sp, #4]
 80a0904:	bd08      	pop	{r3, pc}
 80a0906:	0000      	.short	0x0000
 80a0908:	080601a4 	.word	0x080601a4

080a090c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a090c:	b508      	push	{r3, lr}
 80a090e:	4b03      	ldr	r3, [pc, #12]	; (80a091c <system_ctrl_set_result+0x10>)
 80a0910:	681b      	ldr	r3, [r3, #0]
 80a0912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0916:	9301      	str	r3, [sp, #4]
 80a0918:	bd08      	pop	{r3, pc}
 80a091a:	0000      	.short	0x0000
 80a091c:	080601a4 	.word	0x080601a4

080a0920 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0920:	b508      	push	{r3, lr}
 80a0922:	4b02      	ldr	r3, [pc, #8]	; (80a092c <spark_cloud_flag_connected+0xc>)
 80a0924:	681b      	ldr	r3, [r3, #0]
 80a0926:	695b      	ldr	r3, [r3, #20]
 80a0928:	9301      	str	r3, [sp, #4]
 80a092a:	bd08      	pop	{r3, pc}
 80a092c:	080601cc 	.word	0x080601cc

080a0930 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0930:	b508      	push	{r3, lr}
 80a0932:	4b02      	ldr	r3, [pc, #8]	; (80a093c <spark_send_event+0xc>)
 80a0934:	681b      	ldr	r3, [r3, #0]
 80a0936:	6a1b      	ldr	r3, [r3, #32]
 80a0938:	9301      	str	r3, [sp, #4]
 80a093a:	bd08      	pop	{r3, pc}
 80a093c:	080601cc 	.word	0x080601cc

080a0940 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0940:	b508      	push	{r3, lr}
 80a0942:	4b02      	ldr	r3, [pc, #8]	; (80a094c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0944:	681b      	ldr	r3, [r3, #0]
 80a0946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0948:	9301      	str	r3, [sp, #4]
 80a094a:	bd08      	pop	{r3, pc}
 80a094c:	080601cc 	.word	0x080601cc

080a0950 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0950:	b508      	push	{r3, lr}
 80a0952:	4b02      	ldr	r3, [pc, #8]	; (80a095c <network_connect+0xc>)
 80a0954:	681b      	ldr	r3, [r3, #0]
 80a0956:	685b      	ldr	r3, [r3, #4]
 80a0958:	9301      	str	r3, [sp, #4]
 80a095a:	bd08      	pop	{r3, pc}
 80a095c:	080601c8 	.word	0x080601c8

080a0960 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <network_connecting+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	689b      	ldr	r3, [r3, #8]
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	080601c8 	.word	0x080601c8

080a0970 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b02      	ldr	r3, [pc, #8]	; (80a097c <network_disconnect+0xc>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	68db      	ldr	r3, [r3, #12]
 80a0978:	9301      	str	r3, [sp, #4]
 80a097a:	bd08      	pop	{r3, pc}
 80a097c:	080601c8 	.word	0x080601c8

080a0980 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <network_ready+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	691b      	ldr	r3, [r3, #16]
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601c8 	.word	0x080601c8

080a0990 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <network_on+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	695b      	ldr	r3, [r3, #20]
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601c8 	.word	0x080601c8

080a09a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <network_off+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	699b      	ldr	r3, [r3, #24]
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	080601c8 	.word	0x080601c8

080a09b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <network_listen+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	69db      	ldr	r3, [r3, #28]
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601c8 	.word	0x080601c8

080a09c0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <network_listening+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	6a1b      	ldr	r3, [r3, #32]
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601c8 	.word	0x080601c8

080a09d0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <network_set_listen_timeout+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601c8 	.word	0x080601c8

080a09e0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <network_get_listen_timeout+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601c8 	.word	0x080601c8

080a09f0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <network_is_on+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601c8 	.word	0x080601c8

080a0a00 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <network_is_off+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601c8 	.word	0x080601c8

080a0a10 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <malloc+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	681b      	ldr	r3, [r3, #0]
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601a0 	.word	0x080601a0

080a0a20 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <free+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	685b      	ldr	r3, [r3, #4]
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601a0 	.word	0x080601a0

080a0a30 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <realloc+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	689b      	ldr	r3, [r3, #8]
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601a0 	.word	0x080601a0

080a0a40 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <abort+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601a0 	.word	0x080601a0

080a0a50 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <_malloc_r+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601a0 	.word	0x080601a0

080a0a60 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b02      	ldr	r3, [pc, #8]	; (80a0a6c <__assert_func+0xc>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a68:	9301      	str	r3, [sp, #4]
 80a0a6a:	bd08      	pop	{r3, pc}
 80a0a6c:	080601a0 	.word	0x080601a0

080a0a70 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0a70:	b508      	push	{r3, lr}
 80a0a72:	4b02      	ldr	r3, [pc, #8]	; (80a0a7c <newlib_impure_ptr_callback+0xc>)
 80a0a74:	681b      	ldr	r3, [r3, #0]
 80a0a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a78:	9301      	str	r3, [sp, #4]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	080601a0 	.word	0x080601a0

080a0a80 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0a80:	2100      	movs	r1, #0
 80a0a82:	f7ff bf21 	b.w	80a08c8 <system_delay_ms>

080a0a86 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0a86:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0a88:	6883      	ldr	r3, [r0, #8]
 80a0a8a:	4604      	mov	r4, r0
 80a0a8c:	b90b      	cbnz	r3, 80a0a92 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0a8e:	f001 f875 	bl	80a1b7c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0a92:	68c3      	ldr	r3, [r0, #12]
 80a0a94:	4798      	blx	r3
      if (_M_manager)
 80a0a96:	68a3      	ldr	r3, [r4, #8]
 80a0a98:	b11b      	cbz	r3, 80a0aa2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0a9a:	2203      	movs	r2, #3
 80a0a9c:	4621      	mov	r1, r4
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0aa2:	4620      	mov	r0, r4
}
 80a0aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a0aa8:	2110      	movs	r1, #16
 80a0aaa:	f7ff baf8 	b.w	80a009e <_ZdlPvj>

080a0aae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0aae:	4770      	bx	lr

080a0ab0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a0ab0:	2000      	movs	r0, #0
 80a0ab2:	4770      	bx	lr

080a0ab4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0ab4:	b510      	push	{r4, lr}
 80a0ab6:	4604      	mov	r4, r0
 80a0ab8:	2110      	movs	r1, #16
 80a0aba:	f7ff faf0 	bl	80a009e <_ZdlPvj>
 80a0abe:	4620      	mov	r0, r4
 80a0ac0:	bd10      	pop	{r4, pc}

080a0ac2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a0ac2:	b508      	push	{r3, lr}
      { delete this; }
 80a0ac4:	f7ff fff6 	bl	80a0ab4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0ac8:	bd08      	pop	{r3, pc}

080a0aca <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a0aca:	b510      	push	{r4, lr}
      if (_M_manager)
 80a0acc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0ace:	4604      	mov	r4, r0
      if (_M_manager)
 80a0ad0:	b113      	cbz	r3, 80a0ad8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0ad2:	2203      	movs	r2, #3
 80a0ad4:	4601      	mov	r1, r0
 80a0ad6:	4798      	blx	r3
    }
 80a0ad8:	4620      	mov	r0, r4
 80a0ada:	bd10      	pop	{r4, pc}

080a0adc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0adc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0ade:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a0ae0:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a0ae4:	6002      	str	r2, [r0, #0]
 80a0ae6:	8084      	strh	r4, [r0, #4]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0ae8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0aea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0aec:	680c      	ldr	r4, [r1, #0]
 80a0aee:	8085      	strh	r5, [r0, #4]
 80a0af0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0af2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0af4:	bd30      	pop	{r4, r5, pc}

080a0af6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0af6:	b510      	push	{r4, lr}
 80a0af8:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0afa:	6800      	ldr	r0, [r0, #0]
 80a0afc:	f7ff ff90 	bl	80a0a20 <free>
}
 80a0b00:	4620      	mov	r0, r4
 80a0b02:	bd10      	pop	{r4, pc}

080a0b04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a0b04:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0b06:	68c4      	ldr	r4, [r0, #12]
 80a0b08:	b1f4      	cbz	r4, 80a0b48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a0b0a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0b0c:	2b02      	cmp	r3, #2
 80a0b0e:	d103      	bne.n	80a0b18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0b10:	f104 000c 	add.w	r0, r4, #12
 80a0b14:	f7ff ffef 	bl	80a0af6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a0b18:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0b1a:	b135      	cbz	r5, 80a0b2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a0b1c:	4628      	mov	r0, r5
 80a0b1e:	f7ff ffd4 	bl	80a0aca <_ZNSt14_Function_baseD1Ev>
 80a0b22:	2110      	movs	r1, #16
 80a0b24:	4628      	mov	r0, r5
 80a0b26:	f7ff faba 	bl	80a009e <_ZdlPvj>
 80a0b2a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0b2c:	b135      	cbz	r5, 80a0b3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0b2e:	4628      	mov	r0, r5
 80a0b30:	f7ff ffcb 	bl	80a0aca <_ZNSt14_Function_baseD1Ev>
 80a0b34:	2110      	movs	r1, #16
 80a0b36:	4628      	mov	r0, r5
 80a0b38:	f7ff fab1 	bl	80a009e <_ZdlPvj>
 80a0b3c:	4620      	mov	r0, r4
 80a0b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0b42:	2114      	movs	r1, #20
 80a0b44:	f7ff baab 	b.w	80a009e <_ZdlPvj>
 80a0b48:	bd38      	pop	{r3, r4, r5, pc}

080a0b4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0b4a:	680b      	ldr	r3, [r1, #0]
 80a0b4c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a0b4e:	684b      	ldr	r3, [r1, #4]
 80a0b50:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a0b52:	b113      	cbz	r3, 80a0b5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a0b54:	685a      	ldr	r2, [r3, #4]
 80a0b56:	3201      	adds	r2, #1
 80a0b58:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0b5a:	4770      	bx	lr

080a0b5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0b5e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a0b60:	4668      	mov	r0, sp
 80a0b62:	460d      	mov	r5, r1
 80a0b64:	f7ff fff1 	bl	80a0b4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0b68:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0b6a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0b6c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0b6e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0b70:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a0b72:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a0b74:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0b76:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a0b78:	f7ff fba4 	bl	80a02c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a0b7c:	b135      	cbz	r5, 80a0b8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a0b7e:	1d28      	adds	r0, r5, #4
 80a0b80:	f7ff fba0 	bl	80a02c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b84:	2108      	movs	r1, #8
 80a0b86:	4628      	mov	r0, r5
 80a0b88:	f7ff fa89 	bl	80a009e <_ZdlPvj>
        return p;
    }
 80a0b8c:	4620      	mov	r0, r4
 80a0b8e:	b003      	add	sp, #12
 80a0b90:	bd30      	pop	{r4, r5, pc}

080a0b92 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a0b92:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b94:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a0b96:	460b      	mov	r3, r1
 80a0b98:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b9a:	c803      	ldmia	r0, {r0, r1}
 80a0b9c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0ba0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0ba4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0bac:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0bb0:	b002      	add	sp, #8
 80a0bb2:	bd10      	pop	{r4, pc}

080a0bb4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a0bb4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0bb6:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0bb8:	b90a      	cbnz	r2, 80a0bbe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0bba:	f000 ffdf 	bl	80a1b7c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0bbe:	68c3      	ldr	r3, [r0, #12]
    }
 80a0bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0bc4:	4718      	bx	r3

080a0bc6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0bc6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0bc8:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a0bca:	f100 0110 	add.w	r1, r0, #16
 80a0bce:	f7ff fff1 	bl	80a0bb4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a0bd2:	bd08      	pop	{r3, pc}

080a0bd4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a0bd4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0bd6:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0bd8:	b90a      	cbnz	r2, 80a0bde <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0bda:	f000 ffcf 	bl	80a1b7c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0bde:	68c3      	ldr	r3, [r0, #12]
    }
 80a0be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0be4:	4718      	bx	r3

080a0be6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0be6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0be8:	6800      	ldr	r0, [r0, #0]
 80a0bea:	f100 0110 	add.w	r1, r0, #16
 80a0bee:	f7ff fff1 	bl	80a0bd4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a0bf2:	bd08      	pop	{r3, pc}

080a0bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0bf4:	b538      	push	{r3, r4, r5, lr}
 80a0bf6:	2300      	movs	r3, #0
 80a0bf8:	4604      	mov	r4, r0
 80a0bfa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0bfc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0bfe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0c00:	f7ff fa49 	bl	80a0096 <_Znwj>
 80a0c04:	b128      	cbz	r0, 80a0c12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a0c06:	2301      	movs	r3, #1
 80a0c08:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a0c0c:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0c0e:	60c5      	str	r5, [r0, #12]
 80a0c10:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0c12:	6020      	str	r0, [r4, #0]
	}
 80a0c14:	4620      	mov	r0, r4
 80a0c16:	bd38      	pop	{r3, r4, r5, pc}
 80a0c18:	080a28fc 	.word	0x080a28fc

080a0c1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a0c1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0c1e:	2300      	movs	r3, #0
 80a0c20:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a0c22:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0c24:	4604      	mov	r4, r0
 80a0c26:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0c28:	b12b      	cbz	r3, 80a0c36 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0c2a:	2202      	movs	r2, #2
 80a0c2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0c2e:	68eb      	ldr	r3, [r5, #12]
 80a0c30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0c32:	68ab      	ldr	r3, [r5, #8]
 80a0c34:	60a3      	str	r3, [r4, #8]
    }
 80a0c36:	4620      	mov	r0, r4
 80a0c38:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0c3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a0c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0c3e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a0c40:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0c42:	4668      	mov	r0, sp
 80a0c44:	f7ff ff4a 	bl	80a0adc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0c48:	f04f 0302 	mov.w	r3, #2
 80a0c4c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a0c50:	2a00      	cmp	r2, #0
 80a0c52:	d103      	bne.n	80a0c5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0c54:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a0c58:	2900      	cmp	r1, #0
 80a0c5a:	d1f7      	bne.n	80a0c4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a0c5c:	d125      	bne.n	80a0caa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a0c5e:	f104 050c 	add.w	r5, r4, #12
 80a0c62:	4669      	mov	r1, sp
 80a0c64:	4628      	mov	r0, r5
 80a0c66:	f7ff ff39 	bl	80a0adc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0c6a:	2301      	movs	r3, #1
 80a0c6c:	f3bf 8f5b 	dmb	ish
 80a0c70:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0c72:	2000      	movs	r0, #0
 80a0c74:	f3bf 8f5b 	dmb	ish
 80a0c78:	f104 0308 	add.w	r3, r4, #8
 80a0c7c:	e853 6f00 	ldrex	r6, [r3]
 80a0c80:	e843 0200 	strex	r2, r0, [r3]
 80a0c84:	2a00      	cmp	r2, #0
 80a0c86:	d1f9      	bne.n	80a0c7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a0c88:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0c8c:	b16e      	cbz	r6, 80a0caa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a0c8e:	f7ff fe23 	bl	80a08d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0c92:	b178      	cbz	r0, 80a0cb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0c94:	4629      	mov	r1, r5
 80a0c96:	4630      	mov	r0, r6
 80a0c98:	f7ff ff8c 	bl	80a0bb4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a0c9c:	4630      	mov	r0, r6
 80a0c9e:	f7ff ff14 	bl	80a0aca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0ca2:	2110      	movs	r1, #16
 80a0ca4:	4630      	mov	r0, r6
 80a0ca6:	f7ff f9fa 	bl	80a009e <_ZdlPvj>
        p_->setError(std::move(error));
 80a0caa:	4668      	mov	r0, sp
 80a0cac:	f7ff ff23 	bl	80a0af6 <_ZN8particle5ErrorD1Ev>
    }
 80a0cb0:	b009      	add	sp, #36	; 0x24
 80a0cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0cb4:	4631      	mov	r1, r6
 80a0cb6:	a802      	add	r0, sp, #8
 80a0cb8:	f7ff ffb0 	bl	80a0c1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0cbc:	68e0      	ldr	r0, [r4, #12]
 80a0cbe:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0cc2:	b108      	cbz	r0, 80a0cc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a0cc4:	f001 fd48 	bl	80a2758 <strdup>
        type_(type) {
 80a0cc8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0cca:	2010      	movs	r0, #16
 80a0ccc:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0cd0:	f7ff f9e1 	bl	80a0096 <_Znwj>
 80a0cd4:	4605      	mov	r5, r0
 80a0cd6:	b1e8      	cbz	r0, 80a0d14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a0cd8:	2700      	movs	r7, #0
 80a0cda:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0cdc:	2018      	movs	r0, #24
 80a0cde:	f7ff f9da 	bl	80a0096 <_Znwj>
 80a0ce2:	4604      	mov	r4, r0
 80a0ce4:	b188      	cbz	r0, 80a0d0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a0ce6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0ce8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0cea:	a802      	add	r0, sp, #8
 80a0cec:	f7ff ff51 	bl	80a0b92 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0cf0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0cf2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cf4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0cf6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0cf8:	9204      	str	r2, [sp, #16]
 80a0cfa:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0cfc:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cfe:	60e3      	str	r3, [r4, #12]
 80a0d00:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a0d04:	9205      	str	r2, [sp, #20]
 80a0d06:	f7ff fee9 	bl	80a0adc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d0a:	4b08      	ldr	r3, [pc, #32]	; (80a0d2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d0c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d0e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0d10:	4b07      	ldr	r3, [pc, #28]	; (80a0d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a0d12:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a0d14:	a806      	add	r0, sp, #24
 80a0d16:	f7ff feee 	bl	80a0af6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0d1a:	a802      	add	r0, sp, #8
 80a0d1c:	f7ff fed5 	bl	80a0aca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0d20:	2200      	movs	r2, #0
 80a0d22:	4629      	mov	r1, r5
 80a0d24:	4803      	ldr	r0, [pc, #12]	; (80a0d34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a0d26:	f7ff fddf 	bl	80a08e8 <application_thread_invoke>
 80a0d2a:	e7b7      	b.n	80a0c9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a0d2c:	080a0bc7 	.word	0x080a0bc7
 80a0d30:	080a0e51 	.word	0x080a0e51
 80a0d34:	080a0a87 	.word	0x080a0a87

080a0d38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0d3c:	b08a      	sub	sp, #40	; 0x28
 80a0d3e:	4605      	mov	r5, r0
 80a0d40:	460c      	mov	r4, r1
 80a0d42:	4617      	mov	r7, r2
 80a0d44:	4698      	mov	r8, r3
 80a0d46:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0d4a:	f7ff fde9 	bl	80a0920 <spark_cloud_flag_connected>
 80a0d4e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a0d50:	4682      	mov	sl, r0
 80a0d52:	bb38      	cbnz	r0, 80a0da4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a0d54:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0d58:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0d5a:	a905      	add	r1, sp, #20
 80a0d5c:	4630      	mov	r0, r6
 80a0d5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0d62:	f7ff febb 	bl	80a0adc <_ZN8particle5ErrorC1EOS0_>
 80a0d66:	2014      	movs	r0, #20
 80a0d68:	f7ff f995 	bl	80a0096 <_Znwj>
 80a0d6c:	4604      	mov	r4, r0
 80a0d6e:	b148      	cbz	r0, 80a0d84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0d70:	2302      	movs	r3, #2
 80a0d72:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0d74:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0d76:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0d7a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a0d7c:	4631      	mov	r1, r6
 80a0d7e:	300c      	adds	r0, #12
 80a0d80:	f7ff feac 	bl	80a0adc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0d84:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a0d86:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0d88:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a0d8c:	f7ff ff32 	bl	80a0bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0d90:	4630      	mov	r0, r6
 80a0d92:	f7ff feb0 	bl	80a0af6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0d96:	a805      	add	r0, sp, #20
 80a0d98:	f7ff fead 	bl	80a0af6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a0d9c:	4628      	mov	r0, r5
 80a0d9e:	b00a      	add	sp, #40	; 0x28
 80a0da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a0da4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a0da6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0daa:	2014      	movs	r0, #20
 80a0dac:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a0db0:	9307      	str	r3, [sp, #28]
 80a0db2:	f7ff f970 	bl	80a0096 <_Znwj>
 80a0db6:	4601      	mov	r1, r0
 80a0db8:	b128      	cbz	r0, 80a0dc6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0dba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a0dbe:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0dc2:	f880 a001 	strb.w	sl, [r0, #1]
 80a0dc6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0dc8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a0dca:	f7ff ff13 	bl	80a0bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a0dce:	4b1f      	ldr	r3, [pc, #124]	; (80a0e4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0dd0:	2008      	movs	r0, #8
 80a0dd2:	9308      	str	r3, [sp, #32]
 80a0dd4:	f7ff f95f 	bl	80a0096 <_Znwj>
 80a0dd8:	4682      	mov	sl, r0
 80a0dda:	b110      	cbz	r0, 80a0de2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a0ddc:	a903      	add	r1, sp, #12
 80a0dde:	f7ff feb4 	bl	80a0b4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0de2:	4642      	mov	r2, r8
 80a0de4:	4639      	mov	r1, r7
 80a0de6:	4620      	mov	r0, r4
 80a0de8:	9600      	str	r6, [sp, #0]
 80a0dea:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a0dee:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0df2:	f7ff fd9d 	bl	80a0930 <spark_send_event>
 80a0df6:	b9b8      	cbnz	r0, 80a0e28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a0df8:	9b03      	ldr	r3, [sp, #12]
 80a0dfa:	785b      	ldrb	r3, [r3, #1]
 80a0dfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0e00:	b993      	cbnz	r3, 80a0e28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a0e02:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a0e06:	a905      	add	r1, sp, #20
 80a0e08:	a803      	add	r0, sp, #12
 80a0e0a:	9205      	str	r2, [sp, #20]
 80a0e0c:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0e10:	f7ff ff14 	bl	80a0c3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0e14:	a805      	add	r0, sp, #20
 80a0e16:	f7ff fe6e 	bl	80a0af6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0e1a:	a805      	add	r0, sp, #20
 80a0e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0e1e:	f7ff fe9d 	bl	80a0b5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a0e22:	a806      	add	r0, sp, #24
 80a0e24:	f7ff fa4e 	bl	80a02c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e28:	a903      	add	r1, sp, #12
 80a0e2a:	a805      	add	r0, sp, #20
 80a0e2c:	f7ff fe8d 	bl	80a0b4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0e30:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0e32:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0e34:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a0e36:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0e38:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a0e3a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a0e3c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a0e3e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a0e40:	f7ff fa40 	bl	80a02c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e44:	a804      	add	r0, sp, #16
 80a0e46:	f7ff fa3d 	bl	80a02c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a0e4a:	e7a7      	b.n	80a0d9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a0e4c:	080a0ecd 	.word	0x080a0ecd

080a0e50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a0e50:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e54:	4605      	mov	r5, r0
	switch (__op)
 80a0e56:	d103      	bne.n	80a0e60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a0e58:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a0e5a:	6003      	str	r3, [r0, #0]
      }
 80a0e5c:	2000      	movs	r0, #0
 80a0e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a0e60:	2a02      	cmp	r2, #2
 80a0e62:	d010      	beq.n	80a0e86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a0e64:	2a03      	cmp	r2, #3
 80a0e66:	d1f9      	bne.n	80a0e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a0e68:	6804      	ldr	r4, [r0, #0]
 80a0e6a:	2c00      	cmp	r4, #0
 80a0e6c:	d0f6      	beq.n	80a0e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a0e6e:	f104 0010 	add.w	r0, r4, #16
 80a0e72:	f7ff fe40 	bl	80a0af6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0e76:	4620      	mov	r0, r4
 80a0e78:	f7ff fe27 	bl	80a0aca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0e7c:	2118      	movs	r1, #24
 80a0e7e:	4620      	mov	r0, r4
 80a0e80:	f7ff f90d 	bl	80a009e <_ZdlPvj>
 80a0e84:	e7ea      	b.n	80a0e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0e86:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a0e88:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0e8a:	f7ff f904 	bl	80a0096 <_Znwj>
 80a0e8e:	4604      	mov	r4, r0
 80a0e90:	b150      	cbz	r0, 80a0ea8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0e92:	4631      	mov	r1, r6
 80a0e94:	f7ff fec2 	bl	80a0c1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0e98:	6930      	ldr	r0, [r6, #16]
 80a0e9a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0e9e:	b108      	cbz	r0, 80a0ea4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a0ea0:	f001 fc5a 	bl	80a2758 <strdup>
        type_(type) {
 80a0ea4:	6120      	str	r0, [r4, #16]
 80a0ea6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a0ea8:	602c      	str	r4, [r5, #0]
	}
 80a0eaa:	e7d7      	b.n	80a0e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a0eac <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a0eac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0eae:	2300      	movs	r3, #0
 80a0eb0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a0eb2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0eb4:	4604      	mov	r4, r0
 80a0eb6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0eb8:	b12b      	cbz	r3, 80a0ec6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0eba:	2202      	movs	r2, #2
 80a0ebc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0ebe:	68eb      	ldr	r3, [r5, #12]
 80a0ec0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0ec2:	68ab      	ldr	r3, [r5, #8]
 80a0ec4:	60a3      	str	r3, [r4, #8]
    }
 80a0ec6:	4620      	mov	r0, r4
 80a0ec8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0ecc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ece:	4604      	mov	r4, r0
 80a0ed0:	b089      	sub	sp, #36	; 0x24
 80a0ed2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0ed4:	a801      	add	r0, sp, #4
 80a0ed6:	4611      	mov	r1, r2
 80a0ed8:	f7ff fe40 	bl	80a0b5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0edc:	b1a4      	cbz	r4, 80a0f08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0ede:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0ee0:	b11d      	cbz	r5, 80a0eea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a0ee2:	4628      	mov	r0, r5
 80a0ee4:	f001 fc38 	bl	80a2758 <strdup>
 80a0ee8:	4605      	mov	r5, r0
 80a0eea:	a801      	add	r0, sp, #4
 80a0eec:	a903      	add	r1, sp, #12
        type_(type) {
 80a0eee:	9503      	str	r5, [sp, #12]
 80a0ef0:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a0ef4:	f7ff fea2 	bl	80a0c3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0ef8:	a803      	add	r0, sp, #12
 80a0efa:	f7ff fdfc 	bl	80a0af6 <_ZN8particle5ErrorD1Ev>
 80a0efe:	a802      	add	r0, sp, #8
 80a0f00:	f7ff f9e0 	bl	80a02c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0f04:	b009      	add	sp, #36	; 0x24
 80a0f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0f08:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a0f0a:	9d01      	ldr	r5, [sp, #4]
 80a0f0c:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a0f10:	2a00      	cmp	r2, #0
 80a0f12:	d103      	bne.n	80a0f1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a0f14:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a0f18:	2900      	cmp	r1, #0
 80a0f1a:	d1f7      	bne.n	80a0f0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a0f1c:	d1ef      	bne.n	80a0efe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a0f1e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0f20:	f3bf 8f5b 	dmb	ish
 80a0f24:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0f26:	f3bf 8f5b 	dmb	ish
 80a0f2a:	1d2b      	adds	r3, r5, #4
 80a0f2c:	e853 6f00 	ldrex	r6, [r3]
 80a0f30:	e843 4200 	strex	r2, r4, [r3]
 80a0f34:	2a00      	cmp	r2, #0
 80a0f36:	d1f9      	bne.n	80a0f2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a0f38:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0f3c:	2e00      	cmp	r6, #0
 80a0f3e:	d0de      	beq.n	80a0efe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a0f40:	4620      	mov	r0, r4
 80a0f42:	f7ff fcc9 	bl	80a08d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0f46:	4607      	mov	r7, r0
 80a0f48:	b160      	cbz	r0, 80a0f64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0f4a:	4630      	mov	r0, r6
 80a0f4c:	f105 010c 	add.w	r1, r5, #12
 80a0f50:	f7ff fe40 	bl	80a0bd4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a0f54:	4630      	mov	r0, r6
 80a0f56:	f7ff fdb8 	bl	80a0aca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0f5a:	2110      	movs	r1, #16
 80a0f5c:	4630      	mov	r0, r6
 80a0f5e:	f7ff f89e 	bl	80a009e <_ZdlPvj>
 80a0f62:	e7cc      	b.n	80a0efe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0f64:	4631      	mov	r1, r6
 80a0f66:	a803      	add	r0, sp, #12
 80a0f68:	f7ff ffa0 	bl	80a0eac <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0f6c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0f6e:	2010      	movs	r0, #16
 80a0f70:	f88d 301c 	strb.w	r3, [sp, #28]
 80a0f74:	f7ff f88f 	bl	80a0096 <_Znwj>
 80a0f78:	4605      	mov	r5, r0
 80a0f7a:	b1d0      	cbz	r0, 80a0fb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a0f7c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f7e:	2014      	movs	r0, #20
 80a0f80:	f7ff f889 	bl	80a0096 <_Znwj>
 80a0f84:	4604      	mov	r4, r0
 80a0f86:	b178      	cbz	r0, 80a0fa8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a0f88:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0f8a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0f8c:	a803      	add	r0, sp, #12
 80a0f8e:	f7ff fe00 	bl	80a0b92 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f92:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0f94:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f96:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f98:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a0f9a:	9205      	str	r2, [sp, #20]
 80a0f9c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f9e:	60e3      	str	r3, [r4, #12]
 80a0fa0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a0fa4:	9206      	str	r2, [sp, #24]
 80a0fa6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0fa8:	4b06      	ldr	r3, [pc, #24]	; (80a0fc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0faa:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0fac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0fae:	4b06      	ldr	r3, [pc, #24]	; (80a0fc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a0fb0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a0fb2:	a803      	add	r0, sp, #12
 80a0fb4:	f7ff fd89 	bl	80a0aca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0fb8:	2200      	movs	r2, #0
 80a0fba:	4629      	mov	r1, r5
 80a0fbc:	4803      	ldr	r0, [pc, #12]	; (80a0fcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a0fbe:	f7ff fc93 	bl	80a08e8 <application_thread_invoke>
 80a0fc2:	e7c7      	b.n	80a0f54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a0fc4:	080a0be7 	.word	0x080a0be7
 80a0fc8:	080a0fd1 	.word	0x080a0fd1
 80a0fcc:	080a0a87 	.word	0x080a0a87

080a0fd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a0fd0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0fd2:	b570      	push	{r4, r5, r6, lr}
 80a0fd4:	4604      	mov	r4, r0
	switch (__op)
 80a0fd6:	d103      	bne.n	80a0fe0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a0fd8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a0fda:	6003      	str	r3, [r0, #0]
      }
 80a0fdc:	2000      	movs	r0, #0
 80a0fde:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a0fe0:	2a02      	cmp	r2, #2
 80a0fe2:	d00c      	beq.n	80a0ffe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a0fe4:	2a03      	cmp	r2, #3
 80a0fe6:	d1f9      	bne.n	80a0fdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a0fe8:	6804      	ldr	r4, [r0, #0]
 80a0fea:	2c00      	cmp	r4, #0
 80a0fec:	d0f6      	beq.n	80a0fdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a0fee:	4620      	mov	r0, r4
 80a0ff0:	f7ff fd6b 	bl	80a0aca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0ff4:	2114      	movs	r1, #20
 80a0ff6:	4620      	mov	r0, r4
 80a0ff8:	f7ff f851 	bl	80a009e <_ZdlPvj>
 80a0ffc:	e7ee      	b.n	80a0fdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0ffe:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1000:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1002:	f7ff f848 	bl	80a0096 <_Znwj>
 80a1006:	4605      	mov	r5, r0
 80a1008:	b120      	cbz	r0, 80a1014 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a100a:	4631      	mov	r1, r6
 80a100c:	f7ff ff4e 	bl	80a0eac <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1010:	7c33      	ldrb	r3, [r6, #16]
 80a1012:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1014:	6025      	str	r5, [r4, #0]
	}
 80a1016:	e7e1      	b.n	80a0fdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a1018 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1018:	4770      	bx	lr

080a101a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a101a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a101c:	4606      	mov	r6, r0
 80a101e:	4615      	mov	r5, r2
 80a1020:	460c      	mov	r4, r1
 80a1022:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1024:	42bc      	cmp	r4, r7
 80a1026:	d006      	beq.n	80a1036 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1028:	6833      	ldr	r3, [r6, #0]
 80a102a:	4630      	mov	r0, r6
 80a102c:	689b      	ldr	r3, [r3, #8]
 80a102e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1032:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1034:	e7f6      	b.n	80a1024 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1036:	4628      	mov	r0, r5
 80a1038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a103a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a103a:	2200      	movs	r2, #0
 80a103c:	7c00      	ldrb	r0, [r0, #16]
 80a103e:	f7ff bb71 	b.w	80a0724 <hal_i2c_write>

080a1042 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1042:	2100      	movs	r1, #0
 80a1044:	7c00      	ldrb	r0, [r0, #16]
 80a1046:	f7ff bb75 	b.w	80a0734 <hal_i2c_available>

080a104a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a104a:	2100      	movs	r1, #0
 80a104c:	7c00      	ldrb	r0, [r0, #16]
 80a104e:	f7ff bb79 	b.w	80a0744 <hal_i2c_read>

080a1052 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1052:	2100      	movs	r1, #0
 80a1054:	7c00      	ldrb	r0, [r0, #16]
 80a1056:	f7ff bb7d 	b.w	80a0754 <hal_i2c_peek>

080a105a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a105a:	2100      	movs	r1, #0
 80a105c:	7c00      	ldrb	r0, [r0, #16]
 80a105e:	f7ff bb81 	b.w	80a0764 <hal_i2c_flush>

080a1062 <_ZN7TwoWireD0Ev>:
 80a1062:	b510      	push	{r4, lr}
 80a1064:	4604      	mov	r4, r0
 80a1066:	2114      	movs	r1, #20
 80a1068:	f7ff f819 	bl	80a009e <_ZdlPvj>
 80a106c:	4620      	mov	r0, r4
 80a106e:	bd10      	pop	{r4, pc}

080a1070 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1070:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1076:	4604      	mov	r4, r0
 80a1078:	4608      	mov	r0, r1
 80a107a:	2100      	movs	r1, #0
 80a107c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1080:	4b03      	ldr	r3, [pc, #12]	; (80a1090 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1082:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1084:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1086:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1088:	f7ff fb7c 	bl	80a0784 <hal_i2c_init>
}
 80a108c:	4620      	mov	r0, r4
 80a108e:	bd10      	pop	{r4, pc}
 80a1090:	080a2918 	.word	0x080a2918

080a1094 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1094:	2300      	movs	r3, #0
 80a1096:	7c00      	ldrb	r0, [r0, #16]
 80a1098:	461a      	mov	r2, r3
 80a109a:	4619      	mov	r1, r3
 80a109c:	f7ff bb2a 	b.w	80a06f4 <hal_i2c_begin>

080a10a0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a10a0:	2200      	movs	r2, #0
 80a10a2:	7c00      	ldrb	r0, [r0, #16]
 80a10a4:	f7ff bb2e 	b.w	80a0704 <hal_i2c_begin_transmission>

080a10a8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a10a8:	b2c9      	uxtb	r1, r1
 80a10aa:	f7ff bff9 	b.w	80a10a0 <_ZN7TwoWire17beginTransmissionEh>

080a10ae <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a10ae:	2200      	movs	r2, #0
 80a10b0:	7c00      	ldrb	r0, [r0, #16]
 80a10b2:	f7ff bb2f 	b.w	80a0714 <hal_i2c_end_transmission>

080a10b6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a10b6:	2101      	movs	r1, #1
 80a10b8:	f7ff bff9 	b.w	80a10ae <_ZN7TwoWire15endTransmissionEh>

080a10bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a10bc:	4770      	bx	lr

080a10be <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a10be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10c0:	460e      	mov	r6, r1
 80a10c2:	2400      	movs	r4, #0
 80a10c4:	f100 0708 	add.w	r7, r0, #8
 80a10c8:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a10ca:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a10ce:	220a      	movs	r2, #10
 80a10d0:	4630      	mov	r0, r6
 80a10d2:	f000 f910 	bl	80a12f6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a10d6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a10d8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a10da:	d101      	bne.n	80a10e0 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a10dc:	4620      	mov	r0, r4
 80a10de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a10e0:	2c00      	cmp	r4, #0
 80a10e2:	d0f2      	beq.n	80a10ca <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a10e4:	212e      	movs	r1, #46	; 0x2e
 80a10e6:	4630      	mov	r0, r6
 80a10e8:	f000 f8ec 	bl	80a12c4 <_ZN5Print5printEc>
 80a10ec:	4404      	add	r4, r0
 80a10ee:	e7ec      	b.n	80a10ca <_ZNK9IPAddress7printToER5Print+0xc>

080a10f0 <_ZN9IPAddressD0Ev>:
 80a10f0:	b510      	push	{r4, lr}
 80a10f2:	4604      	mov	r4, r0
 80a10f4:	2118      	movs	r1, #24
 80a10f6:	f7fe ffd2 	bl	80a009e <_ZdlPvj>
 80a10fa:	4620      	mov	r0, r4
 80a10fc:	bd10      	pop	{r4, pc}
	...

080a1100 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1100:	b510      	push	{r4, lr}
 80a1102:	4604      	mov	r4, r0
 80a1104:	4b04      	ldr	r3, [pc, #16]	; (80a1118 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1106:	2211      	movs	r2, #17
 80a1108:	2100      	movs	r1, #0
 80a110a:	f840 3b04 	str.w	r3, [r0], #4
 80a110e:	f001 faed 	bl	80a26ec <memset>
}
 80a1112:	4620      	mov	r0, r4
 80a1114:	bd10      	pop	{r4, pc}
 80a1116:	bf00      	nop
 80a1118:	080a2940 	.word	0x080a2940

080a111c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a111c:	4603      	mov	r3, r0
 80a111e:	4a07      	ldr	r2, [pc, #28]	; (80a113c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1120:	b510      	push	{r4, lr}
 80a1122:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1126:	f101 0210 	add.w	r2, r1, #16
 80a112a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a112e:	4291      	cmp	r1, r2
 80a1130:	f843 4b04 	str.w	r4, [r3], #4
 80a1134:	d1f9      	bne.n	80a112a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1136:	780a      	ldrb	r2, [r1, #0]
 80a1138:	701a      	strb	r2, [r3, #0]
}
 80a113a:	bd10      	pop	{r4, pc}
 80a113c:	080a2940 	.word	0x080a2940

080a1140 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a1140:	4a02      	ldr	r2, [pc, #8]	; (80a114c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a1142:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1146:	2204      	movs	r2, #4
 80a1148:	7502      	strb	r2, [r0, #20]
}
 80a114a:	4770      	bx	lr
 80a114c:	080a2940 	.word	0x080a2940

080a1150 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1150:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1152:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1156:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a115a:	2304      	movs	r3, #4
 80a115c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1160:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1164:	6044      	str	r4, [r0, #4]
 80a1166:	7503      	strb	r3, [r0, #20]
}
 80a1168:	bd10      	pop	{r4, pc}
	...

080a116c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a116c:	b513      	push	{r0, r1, r4, lr}
 80a116e:	4c04      	ldr	r4, [pc, #16]	; (80a1180 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1170:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1172:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a1176:	9400      	str	r4, [sp, #0]
 80a1178:	f7ff ffea 	bl	80a1150 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a117c:	b002      	add	sp, #8
 80a117e:	bd10      	pop	{r4, pc}
 80a1180:	080a2940 	.word	0x080a2940

080a1184 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1184:	4b01      	ldr	r3, [pc, #4]	; (80a118c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1186:	4a02      	ldr	r2, [pc, #8]	; (80a1190 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1188:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a118a:	4770      	bx	lr
 80a118c:	20000880 	.word	0x20000880
 80a1190:	080a294c 	.word	0x080a294c

080a1194 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1194:	2300      	movs	r3, #0
 80a1196:	6840      	ldr	r0, [r0, #4]
 80a1198:	461a      	mov	r2, r3
 80a119a:	f7ff bbd9 	b.w	80a0950 <network_connect>

080a119e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a119e:	2200      	movs	r2, #0
 80a11a0:	2102      	movs	r1, #2
 80a11a2:	6840      	ldr	r0, [r0, #4]
 80a11a4:	f7ff bbe4 	b.w	80a0970 <network_disconnect>

080a11a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a11a8:	2200      	movs	r2, #0
 80a11aa:	6840      	ldr	r0, [r0, #4]
 80a11ac:	4611      	mov	r1, r2
 80a11ae:	f7ff bbd7 	b.w	80a0960 <network_connecting>

080a11b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a11b2:	2200      	movs	r2, #0
 80a11b4:	6840      	ldr	r0, [r0, #4]
 80a11b6:	4611      	mov	r1, r2
 80a11b8:	f7ff bbe2 	b.w	80a0980 <network_ready>

080a11bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a11bc:	2300      	movs	r3, #0
 80a11be:	6840      	ldr	r0, [r0, #4]
 80a11c0:	461a      	mov	r2, r3
 80a11c2:	4619      	mov	r1, r3
 80a11c4:	f7ff bbe4 	b.w	80a0990 <network_on>

080a11c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a11c8:	2300      	movs	r3, #0
 80a11ca:	6840      	ldr	r0, [r0, #4]
 80a11cc:	461a      	mov	r2, r3
 80a11ce:	4619      	mov	r1, r3
 80a11d0:	f7ff bbe6 	b.w	80a09a0 <network_off>

080a11d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a11d4:	2100      	movs	r1, #0
 80a11d6:	6840      	ldr	r0, [r0, #4]
 80a11d8:	f7ff bc0a 	b.w	80a09f0 <network_is_on>

080a11dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a11dc:	2100      	movs	r1, #0
 80a11de:	6840      	ldr	r0, [r0, #4]
 80a11e0:	f7ff bc0e 	b.w	80a0a00 <network_is_off>

080a11e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a11e4:	2200      	movs	r2, #0
 80a11e6:	6840      	ldr	r0, [r0, #4]
 80a11e8:	f081 0101 	eor.w	r1, r1, #1
 80a11ec:	f7ff bbe0 	b.w	80a09b0 <network_listen>

080a11f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a11f0:	2200      	movs	r2, #0
 80a11f2:	6840      	ldr	r0, [r0, #4]
 80a11f4:	f7ff bbec 	b.w	80a09d0 <network_set_listen_timeout>

080a11f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a11f8:	2200      	movs	r2, #0
 80a11fa:	6840      	ldr	r0, [r0, #4]
 80a11fc:	4611      	mov	r1, r2
 80a11fe:	f7ff bbef 	b.w	80a09e0 <network_get_listen_timeout>

080a1202 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1202:	2200      	movs	r2, #0
 80a1204:	6840      	ldr	r0, [r0, #4]
 80a1206:	4611      	mov	r1, r2
 80a1208:	f7ff bbda 	b.w	80a09c0 <network_listening>

080a120c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a120c:	b570      	push	{r4, r5, r6, lr}
 80a120e:	4615      	mov	r5, r2
 80a1210:	b08e      	sub	sp, #56	; 0x38
 80a1212:	4604      	mov	r4, r0
    IPAddress addr;
 80a1214:	a808      	add	r0, sp, #32
 80a1216:	f7ff ff73 	bl	80a1100 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a121a:	2211      	movs	r2, #17
 80a121c:	2100      	movs	r1, #0
 80a121e:	a803      	add	r0, sp, #12
 80a1220:	f001 fa64 	bl	80a26ec <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1224:	2600      	movs	r6, #0
 80a1226:	4628      	mov	r0, r5
 80a1228:	f001 fab1 	bl	80a278e <strlen>
 80a122c:	4b0a      	ldr	r3, [pc, #40]	; (80a1258 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a122e:	9600      	str	r6, [sp, #0]
 80a1230:	b281      	uxth	r1, r0
 80a1232:	685b      	ldr	r3, [r3, #4]
 80a1234:	4628      	mov	r0, r5
 80a1236:	aa03      	add	r2, sp, #12
 80a1238:	f7ff fb36 	bl	80a08a8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a123c:	b130      	cbz	r0, 80a124c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a123e:	4631      	mov	r1, r6
 80a1240:	4620      	mov	r0, r4
 80a1242:	f7ff ff7d 	bl	80a1140 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1246:	4620      	mov	r0, r4
 80a1248:	b00e      	add	sp, #56	; 0x38
 80a124a:	bd70      	pop	{r4, r5, r6, pc}
 80a124c:	4620      	mov	r0, r4
 80a124e:	a903      	add	r1, sp, #12
 80a1250:	f7ff ff64 	bl	80a111c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1254:	e7f7      	b.n	80a1246 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1256:	bf00      	nop
 80a1258:	20000be4 	.word	0x20000be4

080a125c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a125c:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a125e:	4a03      	ldr	r2, [pc, #12]	; (80a126c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1260:	601a      	str	r2, [r3, #0]
 80a1262:	2200      	movs	r2, #0
 80a1264:	605a      	str	r2, [r3, #4]

} // spark
 80a1266:	4770      	bx	lr
 80a1268:	20000884 	.word	0x20000884
 80a126c:	080a2958 	.word	0x080a2958

080a1270 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1272:	4606      	mov	r6, r0
 80a1274:	460d      	mov	r5, r1
  size_t n = 0;
 80a1276:	2400      	movs	r4, #0
 80a1278:	188f      	adds	r7, r1, r2
  while (size--) {
 80a127a:	42bd      	cmp	r5, r7
 80a127c:	d00c      	beq.n	80a1298 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a127e:	6833      	ldr	r3, [r6, #0]
 80a1280:	4630      	mov	r0, r6
 80a1282:	689b      	ldr	r3, [r3, #8]
 80a1284:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1288:	4798      	blx	r3
     if (chunk>=0)
 80a128a:	1e03      	subs	r3, r0, #0
 80a128c:	db01      	blt.n	80a1292 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a128e:	441c      	add	r4, r3
  while (size--) {
 80a1290:	e7f3      	b.n	80a127a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1292:	2c00      	cmp	r4, #0
 80a1294:	bf08      	it	eq
 80a1296:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1298:	4620      	mov	r0, r4
 80a129a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a129c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a129c:	b570      	push	{r4, r5, r6, lr}
 80a129e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a12a0:	460c      	mov	r4, r1
    }
 80a12a2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a12a4:	b149      	cbz	r1, 80a12ba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a12a6:	f001 fa72 	bl	80a278e <strlen>
 80a12aa:	682b      	ldr	r3, [r5, #0]
 80a12ac:	4602      	mov	r2, r0
 80a12ae:	4621      	mov	r1, r4
 80a12b0:	4628      	mov	r0, r5
    }
 80a12b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a12b6:	68db      	ldr	r3, [r3, #12]
 80a12b8:	4718      	bx	r3
    }
 80a12ba:	bd70      	pop	{r4, r5, r6, pc}

080a12bc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a12bc:	b508      	push	{r3, lr}
  return write(str);
 80a12be:	f7ff ffed 	bl	80a129c <_ZN5Print5writeEPKc>
}
 80a12c2:	bd08      	pop	{r3, pc}

080a12c4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a12c4:	6803      	ldr	r3, [r0, #0]
 80a12c6:	689b      	ldr	r3, [r3, #8]
 80a12c8:	4718      	bx	r3

080a12ca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a12ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a12cc:	210d      	movs	r1, #13
{
 80a12ce:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a12d0:	f7ff fff8 	bl	80a12c4 <_ZN5Print5printEc>
  n += print('\n');
 80a12d4:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a12d6:	4604      	mov	r4, r0
  n += print('\n');
 80a12d8:	4628      	mov	r0, r5
 80a12da:	f7ff fff3 	bl	80a12c4 <_ZN5Print5printEc>
  return n;
}
 80a12de:	4420      	add	r0, r4
 80a12e0:	bd38      	pop	{r3, r4, r5, pc}

080a12e2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a12e2:	b538      	push	{r3, r4, r5, lr}
 80a12e4:	4605      	mov	r5, r0
  return write(str);
 80a12e6:	f7ff ffd9 	bl	80a129c <_ZN5Print5writeEPKc>
 80a12ea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a12ec:	4628      	mov	r0, r5
 80a12ee:	f7ff ffec 	bl	80a12ca <_ZN5Print7printlnEv>
  return n;
}
 80a12f2:	4420      	add	r0, r4
 80a12f4:	bd38      	pop	{r3, r4, r5, pc}

080a12f6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a12f6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a12f8:	2a01      	cmp	r2, #1
 80a12fa:	bf98      	it	ls
 80a12fc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a12fe:	b530      	push	{r4, r5, lr}
 80a1300:	b08b      	sub	sp, #44	; 0x2c
 80a1302:	460c      	mov	r4, r1
  *str = '\0';
 80a1304:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1308:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a130a:	4625      	mov	r5, r4
 80a130c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1310:	fb04 5312 	mls	r3, r4, r2, r5
 80a1314:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1316:	2b09      	cmp	r3, #9
 80a1318:	bf94      	ite	ls
 80a131a:	3330      	addls	r3, #48	; 0x30
 80a131c:	3337      	addhi	r3, #55	; 0x37
 80a131e:	b2db      	uxtb	r3, r3
  } while(n);
 80a1320:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1322:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1326:	d9f0      	bls.n	80a130a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1328:	f7ff ffb8 	bl	80a129c <_ZN5Print5writeEPKc>
}
 80a132c:	b00b      	add	sp, #44	; 0x2c
 80a132e:	bd30      	pop	{r4, r5, pc}

080a1330 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1330:	2200      	movs	r2, #0
 80a1332:	4b01      	ldr	r3, [pc, #4]	; (80a1338 <_GLOBAL__sub_I_RGB+0x8>)
 80a1334:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1336:	4770      	bx	lr
 80a1338:	2000088c 	.word	0x2000088c

080a133c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a133c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a133e:	2600      	movs	r6, #0
 80a1340:	4604      	mov	r4, r0
 80a1342:	460d      	mov	r5, r1
 80a1344:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1348:	f7ff f984 	bl	80a0654 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a134c:	4628      	mov	r0, r5
    _spi = spi;
 80a134e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1350:	f7ff fa22 	bl	80a0798 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1354:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1356:	6066      	str	r6, [r4, #4]
}
 80a1358:	bd70      	pop	{r4, r5, r6, pc}

080a135a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a135a:	b510      	push	{r4, lr}
 80a135c:	4604      	mov	r4, r0
{
	free(buffer);
 80a135e:	6800      	ldr	r0, [r0, #0]
 80a1360:	f7ff fb5e 	bl	80a0a20 <free>
}
 80a1364:	4620      	mov	r0, r4
 80a1366:	bd10      	pop	{r4, pc}

080a1368 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1368:	b510      	push	{r4, lr}
 80a136a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a136c:	6800      	ldr	r0, [r0, #0]
 80a136e:	b108      	cbz	r0, 80a1374 <_ZN6String10invalidateEv+0xc>
 80a1370:	f7ff fb56 	bl	80a0a20 <free>
	buffer = NULL;
 80a1374:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1376:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a137a:	6023      	str	r3, [r4, #0]
}
 80a137c:	bd10      	pop	{r4, pc}

080a137e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a137e:	b538      	push	{r3, r4, r5, lr}
 80a1380:	4604      	mov	r4, r0
 80a1382:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1384:	6800      	ldr	r0, [r0, #0]
 80a1386:	3101      	adds	r1, #1
 80a1388:	f7ff fb52 	bl	80a0a30 <realloc>
	if (newbuffer) {
 80a138c:	b110      	cbz	r0, 80a1394 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a138e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1392:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1394:	bd38      	pop	{r3, r4, r5, pc}

080a1396 <_ZN6String7reserveEj>:
{
 80a1396:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1398:	6803      	ldr	r3, [r0, #0]
{
 80a139a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a139c:	b123      	cbz	r3, 80a13a8 <_ZN6String7reserveEj+0x12>
 80a139e:	6843      	ldr	r3, [r0, #4]
 80a13a0:	428b      	cmp	r3, r1
 80a13a2:	d301      	bcc.n	80a13a8 <_ZN6String7reserveEj+0x12>
 80a13a4:	2001      	movs	r0, #1
}
 80a13a6:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a13a8:	4620      	mov	r0, r4
 80a13aa:	f7ff ffe8 	bl	80a137e <_ZN6String12changeBufferEj>
 80a13ae:	2800      	cmp	r0, #0
 80a13b0:	d0f9      	beq.n	80a13a6 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a13b2:	68a3      	ldr	r3, [r4, #8]
 80a13b4:	2b00      	cmp	r3, #0
 80a13b6:	d1f5      	bne.n	80a13a4 <_ZN6String7reserveEj+0xe>
 80a13b8:	6822      	ldr	r2, [r4, #0]
 80a13ba:	7013      	strb	r3, [r2, #0]
 80a13bc:	e7f2      	b.n	80a13a4 <_ZN6String7reserveEj+0xe>

080a13be <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a13be:	b570      	push	{r4, r5, r6, lr}
 80a13c0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a13c2:	4611      	mov	r1, r2
{
 80a13c4:	4604      	mov	r4, r0
 80a13c6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a13c8:	f7ff ffe5 	bl	80a1396 <_ZN6String7reserveEj>
 80a13cc:	b920      	cbnz	r0, 80a13d8 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a13ce:	4620      	mov	r0, r4
 80a13d0:	f7ff ffca 	bl	80a1368 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a13d4:	4620      	mov	r0, r4
 80a13d6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a13d8:	462a      	mov	r2, r5
 80a13da:	4631      	mov	r1, r6
 80a13dc:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a13de:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a13e0:	f001 f976 	bl	80a26d0 <memcpy>
	buffer[len] = 0;
 80a13e4:	2100      	movs	r1, #0
 80a13e6:	6822      	ldr	r2, [r4, #0]
 80a13e8:	68a3      	ldr	r3, [r4, #8]
 80a13ea:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a13ec:	e7f2      	b.n	80a13d4 <_ZN6String4copyEPKcj+0x16>

080a13ee <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a13ee:	b538      	push	{r3, r4, r5, lr}
 80a13f0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a13f2:	460c      	mov	r4, r1
 80a13f4:	b149      	cbz	r1, 80a140a <_ZN6StringaSEPKc+0x1c>
 80a13f6:	4608      	mov	r0, r1
 80a13f8:	f001 f9c9 	bl	80a278e <strlen>
 80a13fc:	4621      	mov	r1, r4
 80a13fe:	4602      	mov	r2, r0
 80a1400:	4628      	mov	r0, r5
 80a1402:	f7ff ffdc 	bl	80a13be <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1406:	4628      	mov	r0, r5
 80a1408:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a140a:	f7ff ffad 	bl	80a1368 <_ZN6String10invalidateEv>
 80a140e:	e7fa      	b.n	80a1406 <_ZN6StringaSEPKc+0x18>

080a1410 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a1410:	b510      	push	{r4, lr}
	buffer = NULL;
 80a1412:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a1414:	4604      	mov	r4, r0
 80a1416:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1418:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a141c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a141e:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a1420:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a1422:	a901      	add	r1, sp, #4
 80a1424:	f000 f9d4 	bl	80a17d0 <itoa>
	*this = buf;
 80a1428:	4620      	mov	r0, r4
 80a142a:	a901      	add	r1, sp, #4
 80a142c:	f7ff ffdf 	bl	80a13ee <_ZN6StringaSEPKc>
}
 80a1430:	4620      	mov	r0, r4
 80a1432:	b00a      	add	sp, #40	; 0x28
 80a1434:	bd10      	pop	{r4, pc}
	...

080a1438 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1438:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a143a:	2000      	movs	r0, #0
 80a143c:	4b04      	ldr	r3, [pc, #16]	; (80a1450 <_GLOBAL__sub_I_System+0x18>)
 80a143e:	601a      	str	r2, [r3, #0]
 80a1440:	4b04      	ldr	r3, [pc, #16]	; (80a1454 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1442:	4a05      	ldr	r2, [pc, #20]	; (80a1458 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1444:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a1448:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a144a:	f7ff ba35 	b.w	80a08b8 <set_system_mode>
 80a144e:	bf00      	nop
 80a1450:	200008a8 	.word	0x200008a8
 80a1454:	2000089c 	.word	0x2000089c
 80a1458:	ffff0000 	.word	0xffff0000

080a145c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a145c:	4b02      	ldr	r3, [pc, #8]	; (80a1468 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a145e:	681a      	ldr	r2, [r3, #0]
 80a1460:	4b02      	ldr	r3, [pc, #8]	; (80a146c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1462:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1464:	4770      	bx	lr
 80a1466:	bf00      	nop
 80a1468:	20000010 	.word	0x20000010
 80a146c:	200008ac 	.word	0x200008ac

080a1470 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a1470:	4770      	bx	lr

080a1472 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1472:	7441      	strb	r1, [r0, #17]
}
 80a1474:	4770      	bx	lr

080a1476 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1476:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1478:	7c00      	ldrb	r0, [r0, #16]
 80a147a:	f7ff f9cd 	bl	80a0818 <hal_usart_available_data_for_write>
}
 80a147e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1482:	bd08      	pop	{r3, pc}

080a1484 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1484:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1486:	7c00      	ldrb	r0, [r0, #16]
 80a1488:	f7ff f99e 	bl	80a07c8 <hal_usart_available>
}
 80a148c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1490:	bd08      	pop	{r3, pc}

080a1492 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1492:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1494:	7c00      	ldrb	r0, [r0, #16]
 80a1496:	f7ff f9a7 	bl	80a07e8 <hal_usart_peek>
}
 80a149a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a149e:	bd08      	pop	{r3, pc}

080a14a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a14a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a14a2:	7c00      	ldrb	r0, [r0, #16]
 80a14a4:	f7ff f998 	bl	80a07d8 <hal_usart_read>
}
 80a14a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a14ac:	bd08      	pop	{r3, pc}

080a14ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a14ae:	7c00      	ldrb	r0, [r0, #16]
 80a14b0:	f7ff b9a2 	b.w	80a07f8 <hal_usart_flush>

080a14b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a14b4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a14b6:	7c46      	ldrb	r6, [r0, #17]
{
 80a14b8:	4604      	mov	r4, r0
 80a14ba:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a14bc:	b12e      	cbz	r6, 80a14ca <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a14be:	4629      	mov	r1, r5
 80a14c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a14c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a14c6:	f7ff b977 	b.w	80a07b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a14ca:	7c00      	ldrb	r0, [r0, #16]
 80a14cc:	f7ff f9a4 	bl	80a0818 <hal_usart_available_data_for_write>
 80a14d0:	2800      	cmp	r0, #0
 80a14d2:	dcf4      	bgt.n	80a14be <_ZN11USARTSerial5writeEh+0xa>
}
 80a14d4:	4630      	mov	r0, r6
 80a14d6:	bd70      	pop	{r4, r5, r6, pc}

080a14d8 <_ZN11USARTSerialD0Ev>:
 80a14d8:	b510      	push	{r4, lr}
 80a14da:	4604      	mov	r4, r0
 80a14dc:	2114      	movs	r1, #20
 80a14de:	f7fe fdde 	bl	80a009e <_ZdlPvj>
 80a14e2:	4620      	mov	r0, r4
 80a14e4:	bd10      	pop	{r4, pc}
	...

080a14e8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a14e8:	b510      	push	{r4, lr}
 80a14ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a14ee:	4604      	mov	r4, r0
 80a14f0:	4608      	mov	r0, r1
 80a14f2:	4611      	mov	r1, r2
 80a14f4:	2200      	movs	r2, #0
 80a14f6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a14fa:	4b04      	ldr	r3, [pc, #16]	; (80a150c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a14fc:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a14fe:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1500:	2301      	movs	r3, #1
 80a1502:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a1504:	f7ff f990 	bl	80a0828 <hal_usart_init_ex>
}
 80a1508:	4620      	mov	r0, r4
 80a150a:	bd10      	pop	{r4, pc}
 80a150c:	080a29b0 	.word	0x080a29b0

080a1510 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1510:	7441      	strb	r1, [r0, #17]
}
 80a1512:	4770      	bx	lr

080a1514 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1514:	4770      	bx	lr

080a1516 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1516:	4770      	bx	lr

080a1518 <_ZN9USBSerial4readEv>:
{
 80a1518:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a151a:	2100      	movs	r1, #0
 80a151c:	7c00      	ldrb	r0, [r0, #16]
 80a151e:	f7ff f9ab 	bl	80a0878 <HAL_USB_USART_Receive_Data>
}
 80a1522:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1526:	bd08      	pop	{r3, pc}

080a1528 <_ZN9USBSerial4peekEv>:
{
 80a1528:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a152a:	2101      	movs	r1, #1
 80a152c:	7c00      	ldrb	r0, [r0, #16]
 80a152e:	f7ff f9a3 	bl	80a0878 <HAL_USB_USART_Receive_Data>
}
 80a1532:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1536:	bd08      	pop	{r3, pc}

080a1538 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1538:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a153a:	7c00      	ldrb	r0, [r0, #16]
 80a153c:	f7ff f994 	bl	80a0868 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1540:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1544:	bd08      	pop	{r3, pc}

080a1546 <_ZN9USBSerial9availableEv>:
{
 80a1546:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1548:	7c00      	ldrb	r0, [r0, #16]
 80a154a:	f7ff f985 	bl	80a0858 <HAL_USB_USART_Available_Data>
}
 80a154e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1552:	bd08      	pop	{r3, pc}

080a1554 <_ZN9USBSerial5writeEh>:
{
 80a1554:	b538      	push	{r3, r4, r5, lr}
 80a1556:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1558:	7c00      	ldrb	r0, [r0, #16]
{
 80a155a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a155c:	f7ff f984 	bl	80a0868 <HAL_USB_USART_Available_Data_For_Write>
 80a1560:	2800      	cmp	r0, #0
 80a1562:	dc01      	bgt.n	80a1568 <_ZN9USBSerial5writeEh+0x14>
 80a1564:	7c60      	ldrb	r0, [r4, #17]
 80a1566:	b128      	cbz	r0, 80a1574 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1568:	4629      	mov	r1, r5
 80a156a:	7c20      	ldrb	r0, [r4, #16]
 80a156c:	f7ff f98c 	bl	80a0888 <HAL_USB_USART_Send_Data>
 80a1570:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1574:	bd38      	pop	{r3, r4, r5, pc}

080a1576 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1576:	7c00      	ldrb	r0, [r0, #16]
 80a1578:	f7ff b98e 	b.w	80a0898 <HAL_USB_USART_Flush_Data>

080a157c <_ZN9USBSerialD0Ev>:
 80a157c:	b510      	push	{r4, lr}
 80a157e:	4604      	mov	r4, r0
 80a1580:	2114      	movs	r1, #20
 80a1582:	f7fe fd8c 	bl	80a009e <_ZdlPvj>
 80a1586:	4620      	mov	r0, r4
 80a1588:	bd10      	pop	{r4, pc}

080a158a <__tcf_1>:
 80a158a:	4770      	bx	lr

080a158c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a158c:	b510      	push	{r4, lr}
 80a158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1592:	4604      	mov	r4, r0
 80a1594:	4608      	mov	r0, r1
 80a1596:	2100      	movs	r1, #0
 80a1598:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a159c:	4b04      	ldr	r3, [pc, #16]	; (80a15b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a159e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a15a0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a15a2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a15a4:	4611      	mov	r1, r2
  _blocking = true;
 80a15a6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a15a8:	f7ff f946 	bl	80a0838 <HAL_USB_USART_Init>
}
 80a15ac:	4620      	mov	r0, r4
 80a15ae:	bd10      	pop	{r4, pc}
 80a15b0:	080a29e0 	.word	0x080a29e0

080a15b4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a15b4:	2200      	movs	r2, #0
 80a15b6:	7c00      	ldrb	r0, [r0, #16]
 80a15b8:	f7ff b946 	b.w	80a0848 <HAL_USB_USART_Begin>

080a15bc <_Z19acquireSerialBufferv>:
{
 80a15bc:	b510      	push	{r4, lr}
 80a15be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a15c0:	2214      	movs	r2, #20
 80a15c2:	2100      	movs	r1, #0
 80a15c4:	f001 f892 	bl	80a26ec <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a15c8:	4b05      	ldr	r3, [pc, #20]	; (80a15e0 <_Z19acquireSerialBufferv+0x24>)
}
 80a15ca:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a15cc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a15ce:	4b05      	ldr	r3, [pc, #20]	; (80a15e4 <_Z19acquireSerialBufferv+0x28>)
 80a15d0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a15d2:	f240 1301 	movw	r3, #257	; 0x101
 80a15d6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a15d8:	2381      	movs	r3, #129	; 0x81
 80a15da:	8223      	strh	r3, [r4, #16]
}
 80a15dc:	bd10      	pop	{r4, pc}
 80a15de:	bf00      	nop
 80a15e0:	200008e0 	.word	0x200008e0
 80a15e4:	200009e1 	.word	0x200009e1

080a15e8 <_Z16_fetch_usbserialv>:
{
 80a15e8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a15ea:	4d0e      	ldr	r5, [pc, #56]	; (80a1624 <_Z16_fetch_usbserialv+0x3c>)
{
 80a15ec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a15ee:	a801      	add	r0, sp, #4
 80a15f0:	f7ff ffe4 	bl	80a15bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a15f4:	7829      	ldrb	r1, [r5, #0]
 80a15f6:	f3bf 8f5b 	dmb	ish
 80a15fa:	f011 0401 	ands.w	r4, r1, #1
 80a15fe:	d10e      	bne.n	80a161e <_Z16_fetch_usbserialv+0x36>
 80a1600:	4628      	mov	r0, r5
 80a1602:	f7fe fd4e 	bl	80a00a2 <__cxa_guard_acquire>
 80a1606:	b150      	cbz	r0, 80a161e <_Z16_fetch_usbserialv+0x36>
 80a1608:	4621      	mov	r1, r4
 80a160a:	aa01      	add	r2, sp, #4
 80a160c:	4806      	ldr	r0, [pc, #24]	; (80a1628 <_Z16_fetch_usbserialv+0x40>)
 80a160e:	f7ff ffbd 	bl	80a158c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1612:	4628      	mov	r0, r5
 80a1614:	f7fe fd4a 	bl	80a00ac <__cxa_guard_release>
 80a1618:	4804      	ldr	r0, [pc, #16]	; (80a162c <_Z16_fetch_usbserialv+0x44>)
 80a161a:	f001 f853 	bl	80a26c4 <atexit>
	return _usbserial;
}
 80a161e:	4802      	ldr	r0, [pc, #8]	; (80a1628 <_Z16_fetch_usbserialv+0x40>)
 80a1620:	b007      	add	sp, #28
 80a1622:	bd30      	pop	{r4, r5, pc}
 80a1624:	200008b0 	.word	0x200008b0
 80a1628:	200008b8 	.word	0x200008b8
 80a162c:	080a1515 	.word	0x080a1515

080a1630 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1630:	b510      	push	{r4, lr}
 80a1632:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a1634:	2214      	movs	r2, #20
 80a1636:	2100      	movs	r1, #0
 80a1638:	f001 f858 	bl	80a26ec <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a163c:	4b05      	ldr	r3, [pc, #20]	; (80a1654 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a163e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1640:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1642:	4b05      	ldr	r3, [pc, #20]	; (80a1658 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1644:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1646:	f240 1301 	movw	r3, #257	; 0x101
 80a164a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a164c:	2381      	movs	r3, #129	; 0x81
 80a164e:	8223      	strh	r3, [r4, #16]
}
 80a1650:	bd10      	pop	{r4, pc}
 80a1652:	bf00      	nop
 80a1654:	20000a62 	.word	0x20000a62
 80a1658:	20000b63 	.word	0x20000b63

080a165c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a165c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a165e:	4c0e      	ldr	r4, [pc, #56]	; (80a1698 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1660:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1662:	a801      	add	r0, sp, #4
 80a1664:	f7ff ffe4 	bl	80a1630 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1668:	7823      	ldrb	r3, [r4, #0]
 80a166a:	f3bf 8f5b 	dmb	ish
 80a166e:	07db      	lsls	r3, r3, #31
 80a1670:	d40e      	bmi.n	80a1690 <_Z17_fetch_usbserial1v+0x34>
 80a1672:	4620      	mov	r0, r4
 80a1674:	f7fe fd15 	bl	80a00a2 <__cxa_guard_acquire>
 80a1678:	b150      	cbz	r0, 80a1690 <_Z17_fetch_usbserial1v+0x34>
 80a167a:	2101      	movs	r1, #1
 80a167c:	aa01      	add	r2, sp, #4
 80a167e:	4807      	ldr	r0, [pc, #28]	; (80a169c <_Z17_fetch_usbserial1v+0x40>)
 80a1680:	f7ff ff84 	bl	80a158c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1684:	4620      	mov	r0, r4
 80a1686:	f7fe fd11 	bl	80a00ac <__cxa_guard_release>
 80a168a:	4805      	ldr	r0, [pc, #20]	; (80a16a0 <_Z17_fetch_usbserial1v+0x44>)
 80a168c:	f001 f81a 	bl	80a26c4 <atexit>
  return _usbserial1;
}
 80a1690:	4802      	ldr	r0, [pc, #8]	; (80a169c <_Z17_fetch_usbserial1v+0x40>)
 80a1692:	b006      	add	sp, #24
 80a1694:	bd10      	pop	{r4, pc}
 80a1696:	bf00      	nop
 80a1698:	200008b4 	.word	0x200008b4
 80a169c:	200008cc 	.word	0x200008cc
 80a16a0:	080a158b 	.word	0x080a158b

080a16a4 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a16a4:	2200      	movs	r2, #0
 80a16a6:	6840      	ldr	r0, [r0, #4]
 80a16a8:	4611      	mov	r1, r2
 80a16aa:	f7ff b969 	b.w	80a0980 <network_ready>

080a16ae <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a16ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a16b0:	4615      	mov	r5, r2
 80a16b2:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a16b4:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a16b6:	460e      	mov	r6, r1
 80a16b8:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a16ba:	2100      	movs	r1, #0
 80a16bc:	a803      	add	r0, sp, #12
 80a16be:	f001 f815 	bl	80a26ec <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a16c2:	4628      	mov	r0, r5
 80a16c4:	f001 f863 	bl	80a278e <strlen>
 80a16c8:	2700      	movs	r7, #0
 80a16ca:	b281      	uxth	r1, r0
 80a16cc:	6873      	ldr	r3, [r6, #4]
 80a16ce:	4628      	mov	r0, r5
 80a16d0:	9700      	str	r7, [sp, #0]
 80a16d2:	aa03      	add	r2, sp, #12
 80a16d4:	f7ff f8e8 	bl	80a08a8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a16d8:	b130      	cbz	r0, 80a16e8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a16da:	4639      	mov	r1, r7
 80a16dc:	4620      	mov	r0, r4
 80a16de:	f7ff fd2f 	bl	80a1140 <_ZN9IPAddressC1Em>
    }
 80a16e2:	4620      	mov	r0, r4
 80a16e4:	b009      	add	sp, #36	; 0x24
 80a16e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a16e8:	4620      	mov	r0, r4
 80a16ea:	a903      	add	r1, sp, #12
 80a16ec:	f7ff fd16 	bl	80a111c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a16f0:	e7f7      	b.n	80a16e2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a16f2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a16f2:	2200      	movs	r2, #0
 80a16f4:	6840      	ldr	r0, [r0, #4]
 80a16f6:	4611      	mov	r1, r2
 80a16f8:	f7ff b962 	b.w	80a09c0 <network_listening>

080a16fc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a16fc:	2200      	movs	r2, #0
 80a16fe:	6840      	ldr	r0, [r0, #4]
 80a1700:	4611      	mov	r1, r2
 80a1702:	f7ff b96d 	b.w	80a09e0 <network_get_listen_timeout>

080a1706 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1706:	2200      	movs	r2, #0
 80a1708:	6840      	ldr	r0, [r0, #4]
 80a170a:	f7ff b961 	b.w	80a09d0 <network_set_listen_timeout>

080a170e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a170e:	2200      	movs	r2, #0
 80a1710:	6840      	ldr	r0, [r0, #4]
 80a1712:	f081 0101 	eor.w	r1, r1, #1
 80a1716:	f7ff b94b 	b.w	80a09b0 <network_listen>

080a171a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a171a:	2300      	movs	r3, #0
 80a171c:	6840      	ldr	r0, [r0, #4]
 80a171e:	461a      	mov	r2, r3
 80a1720:	4619      	mov	r1, r3
 80a1722:	f7ff b93d 	b.w	80a09a0 <network_off>

080a1726 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a1726:	2300      	movs	r3, #0
 80a1728:	6840      	ldr	r0, [r0, #4]
 80a172a:	461a      	mov	r2, r3
 80a172c:	4619      	mov	r1, r3
 80a172e:	f7ff b92f 	b.w	80a0990 <network_on>

080a1732 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1732:	2200      	movs	r2, #0
 80a1734:	6840      	ldr	r0, [r0, #4]
 80a1736:	4611      	mov	r1, r2
 80a1738:	f7ff b912 	b.w	80a0960 <network_connecting>

080a173c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a173c:	2200      	movs	r2, #0
 80a173e:	2102      	movs	r1, #2
 80a1740:	6840      	ldr	r0, [r0, #4]
 80a1742:	f7ff b915 	b.w	80a0970 <network_disconnect>

080a1746 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1746:	2300      	movs	r3, #0
 80a1748:	6840      	ldr	r0, [r0, #4]
 80a174a:	461a      	mov	r2, r3
 80a174c:	f7ff b900 	b.w	80a0950 <network_connect>

080a1750 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1750:	2204      	movs	r2, #4
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1754:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1756:	4a02      	ldr	r2, [pc, #8]	; (80a1760 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1758:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a175a:	4770      	bx	lr
 80a175c:	20000be4 	.word	0x20000be4
 80a1760:	080a2a10 	.word	0x080a2a10

080a1764 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1764:	b510      	push	{r4, lr}
 80a1766:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1768:	f001 f811 	bl	80a278e <strlen>
 80a176c:	1e43      	subs	r3, r0, #1
 80a176e:	4620      	mov	r0, r4
 80a1770:	4423      	add	r3, r4
	while(i<j){
 80a1772:	4283      	cmp	r3, r0
 80a1774:	d906      	bls.n	80a1784 <_Z11str_reversePc+0x20>
		c = *i;
 80a1776:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1778:	7819      	ldrb	r1, [r3, #0]
 80a177a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a177e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a1782:	e7f6      	b.n	80a1772 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a1784:	bd10      	pop	{r4, pc}

080a1786 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1786:	b570      	push	{r4, r5, r6, lr}
 80a1788:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a178a:	1e91      	subs	r1, r2, #2
 80a178c:	2922      	cmp	r1, #34	; 0x22
 80a178e:	d81d      	bhi.n	80a17cc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 80a1790:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a1792:	b930      	cbnz	r0, 80a17a2 <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a1794:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 80a1796:	4423      	add	r3, r4
 80a1798:	429d      	cmp	r5, r3
 80a179a:	d210      	bcs.n	80a17be <ultoa+0x38>
            *ptr++ = '0';
 80a179c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 80a17a0:	e7fa      	b.n	80a1798 <ultoa+0x12>
            result.quot = a/radix;
 80a17a2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a17a6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a17aa:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a17ac:	2809      	cmp	r0, #9
                *ptr += '0';
 80a17ae:	bf94      	ite	ls
 80a17b0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 80a17b2:	3157      	addhi	r1, #87	; 0x57
 80a17b4:	b2c9      	uxtb	r1, r1
            a = result.quot;
 80a17b6:	4630      	mov	r0, r6
 80a17b8:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a17bc:	e7e9      	b.n	80a1792 <ultoa+0xc>

	*ptr = '\0';
 80a17be:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a17c0:	4620      	mov	r0, r4
	*ptr = '\0';
 80a17c2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 80a17c4:	f7ff ffce 	bl	80a1764 <_Z11str_reversePc>
	return buffer;
 80a17c8:	4620      	mov	r0, r4
}
 80a17ca:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a17cc:	2000      	movs	r0, #0
 80a17ce:	e7fc      	b.n	80a17ca <ultoa+0x44>

080a17d0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a17d0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a17d2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a17d4:	460c      	mov	r4, r1
 80a17d6:	4615      	mov	r5, r2
	if(a<0){
 80a17d8:	da0d      	bge.n	80a17f6 <itoa+0x26>
		*buffer = '-';
 80a17da:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a17dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a17e0:	bf0c      	ite	eq
 80a17e2:	4618      	moveq	r0, r3
 80a17e4:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a17e6:	2301      	movs	r3, #1
		*buffer = '-';
 80a17e8:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a17ea:	462a      	mov	r2, r5
 80a17ec:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a17ee:	f7ff ffca 	bl	80a1786 <ultoa>
	}
	return buffer;
}
 80a17f2:	4620      	mov	r0, r4
 80a17f4:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a17f6:	2301      	movs	r3, #1
 80a17f8:	e7f9      	b.n	80a17ee <itoa+0x1e>
	...

080a17fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a17fc:	4b01      	ldr	r3, [pc, #4]	; (80a1804 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a17fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1800:	4770      	bx	lr
 80a1802:	bf00      	nop
 80a1804:	20000014 	.word	0x20000014

080a1808 <serialEventRun>:
{
 80a1808:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a180a:	4b13      	ldr	r3, [pc, #76]	; (80a1858 <serialEventRun+0x50>)
 80a180c:	b143      	cbz	r3, 80a1820 <serialEventRun+0x18>
 80a180e:	f7ff feeb 	bl	80a15e8 <_Z16_fetch_usbserialv>
 80a1812:	6803      	ldr	r3, [r0, #0]
 80a1814:	691b      	ldr	r3, [r3, #16]
 80a1816:	4798      	blx	r3
 80a1818:	2800      	cmp	r0, #0
 80a181a:	dd01      	ble.n	80a1820 <serialEventRun+0x18>
        serialEvent();
 80a181c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1820:	4b0e      	ldr	r3, [pc, #56]	; (80a185c <serialEventRun+0x54>)
 80a1822:	b143      	cbz	r3, 80a1836 <serialEventRun+0x2e>
 80a1824:	f000 f984 	bl	80a1b30 <_Z22__fetch_global_Serial1v>
 80a1828:	6803      	ldr	r3, [r0, #0]
 80a182a:	691b      	ldr	r3, [r3, #16]
 80a182c:	4798      	blx	r3
 80a182e:	2800      	cmp	r0, #0
 80a1830:	dd01      	ble.n	80a1836 <serialEventRun+0x2e>
        serialEvent1();
 80a1832:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1836:	4b0a      	ldr	r3, [pc, #40]	; (80a1860 <serialEventRun+0x58>)
 80a1838:	b10b      	cbz	r3, 80a183e <serialEventRun+0x36>
 80a183a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a183e:	4b09      	ldr	r3, [pc, #36]	; (80a1864 <serialEventRun+0x5c>)
 80a1840:	b143      	cbz	r3, 80a1854 <serialEventRun+0x4c>
 80a1842:	f7ff ff0b 	bl	80a165c <_Z17_fetch_usbserial1v>
 80a1846:	6803      	ldr	r3, [r0, #0]
 80a1848:	691b      	ldr	r3, [r3, #16]
 80a184a:	4798      	blx	r3
 80a184c:	2800      	cmp	r0, #0
 80a184e:	dd01      	ble.n	80a1854 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1850:	f3af 8000 	nop.w
}
 80a1854:	bd08      	pop	{r3, pc}
 80a1856:	bf00      	nop
	...

080a1868 <_post_loop>:
{
 80a1868:	b508      	push	{r3, lr}
	serialEventRun();
 80a186a:	f7ff ffcd 	bl	80a1808 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a186e:	f7fe ff11 	bl	80a0694 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1872:	4b01      	ldr	r3, [pc, #4]	; (80a1878 <_post_loop+0x10>)
 80a1874:	6018      	str	r0, [r3, #0]
}
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	20000c04 	.word	0x20000c04

080a187c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a187c:	4805      	ldr	r0, [pc, #20]	; (80a1894 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a187e:	4a06      	ldr	r2, [pc, #24]	; (80a1898 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1880:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1882:	1a12      	subs	r2, r2, r0
 80a1884:	4905      	ldr	r1, [pc, #20]	; (80a189c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a1886:	f000 ff23 	bl	80a26d0 <memcpy>
    __backup_sram_signature = signature;
 80a188a:	4b05      	ldr	r3, [pc, #20]	; (80a18a0 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a188c:	4a05      	ldr	r2, [pc, #20]	; (80a18a4 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a188e:	601a      	str	r2, [r3, #0]
}
 80a1890:	bd08      	pop	{r3, pc}
 80a1892:	bf00      	nop
 80a1894:	40024000 	.word	0x40024000
 80a1898:	40024004 	.word	0x40024004
 80a189c:	080a2ae0 	.word	0x080a2ae0
 80a18a0:	40024000 	.word	0x40024000
 80a18a4:	9a271c1e 	.word	0x9a271c1e

080a18a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a18a8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a18aa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a18ac:	461a      	mov	r2, r3
 80a18ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a18b2:	9300      	str	r3, [sp, #0]
 80a18b4:	f7ff f82a 	bl	80a090c <system_ctrl_set_result>
}
 80a18b8:	b003      	add	sp, #12
 80a18ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a18c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a18c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a18c2:	8843      	ldrh	r3, [r0, #2]
 80a18c4:	2b0a      	cmp	r3, #10
 80a18c6:	d008      	beq.n	80a18da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a18c8:	2b50      	cmp	r3, #80	; 0x50
 80a18ca:	d10b      	bne.n	80a18e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a18cc:	4b09      	ldr	r3, [pc, #36]	; (80a18f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a18ce:	681b      	ldr	r3, [r3, #0]
 80a18d0:	b14b      	cbz	r3, 80a18e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a18d2:	b003      	add	sp, #12
 80a18d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a18d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a18da:	f7ff ffe5 	bl	80a18a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a18de:	b003      	add	sp, #12
 80a18e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a18e4:	2300      	movs	r3, #0
 80a18e6:	461a      	mov	r2, r3
 80a18e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a18ec:	9300      	str	r3, [sp, #0]
 80a18ee:	f7ff f80d 	bl	80a090c <system_ctrl_set_result>
}
 80a18f2:	e7f4      	b.n	80a18de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a18f4:	20000bf0 	.word	0x20000bf0

080a18f8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a18f8:	2100      	movs	r1, #0
{
 80a18fa:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a18fc:	4811      	ldr	r0, [pc, #68]	; (80a1944 <module_user_init_hook+0x4c>)
 80a18fe:	f7ff f8b7 	bl	80a0a70 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a1902:	4b11      	ldr	r3, [pc, #68]	; (80a1948 <module_user_init_hook+0x50>)
 80a1904:	681a      	ldr	r2, [r3, #0]
 80a1906:	4b11      	ldr	r3, [pc, #68]	; (80a194c <module_user_init_hook+0x54>)
 80a1908:	429a      	cmp	r2, r3
 80a190a:	bf0c      	ite	eq
 80a190c:	2201      	moveq	r2, #1
 80a190e:	2200      	movne	r2, #0
 80a1910:	4b0f      	ldr	r3, [pc, #60]	; (80a1950 <module_user_init_hook+0x58>)
 80a1912:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1914:	d001      	beq.n	80a191a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a1916:	f7ff ffb1 	bl	80a187c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a191a:	f7fe feab 	bl	80a0674 <HAL_RNG_GetRandomNumber>
 80a191e:	4604      	mov	r4, r0
    srand(seed);
 80a1920:	f000 feec 	bl	80a26fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1924:	4b0b      	ldr	r3, [pc, #44]	; (80a1954 <module_user_init_hook+0x5c>)
 80a1926:	b113      	cbz	r3, 80a192e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a1928:	4620      	mov	r0, r4
 80a192a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a192e:	2100      	movs	r1, #0
 80a1930:	4808      	ldr	r0, [pc, #32]	; (80a1954 <module_user_init_hook+0x5c>)
 80a1932:	f7ff f805 	bl	80a0940 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a193a:	2100      	movs	r1, #0
 80a193c:	4806      	ldr	r0, [pc, #24]	; (80a1958 <module_user_init_hook+0x60>)
 80a193e:	f7fe bfdb 	b.w	80a08f8 <system_ctrl_set_app_request_handler>
 80a1942:	bf00      	nop
 80a1944:	080a17fd 	.word	0x080a17fd
 80a1948:	40024000 	.word	0x40024000
 80a194c:	9a271c1e 	.word	0x9a271c1e
 80a1950:	20000bec 	.word	0x20000bec
 80a1954:	00000000 	.word	0x00000000
 80a1958:	080a18c1 	.word	0x080a18c1

080a195c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a195c:	4b02      	ldr	r3, [pc, #8]	; (80a1968 <__tcf_0+0xc>)
 80a195e:	6898      	ldr	r0, [r3, #8]
 80a1960:	b108      	cbz	r0, 80a1966 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a1962:	f7fe be7f 	b.w	80a0664 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1966:	4770      	bx	lr
 80a1968:	20000bf8 	.word	0x20000bf8

080a196c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a196c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a196e:	b570      	push	{r4, r5, r6, lr}
 80a1970:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1972:	d901      	bls.n	80a1978 <pinAvailable+0xc>
    return false;
 80a1974:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a1976:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1978:	f1a0 030d 	sub.w	r3, r0, #13
 80a197c:	2b02      	cmp	r3, #2
 80a197e:	d90b      	bls.n	80a1998 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1980:	2801      	cmp	r0, #1
 80a1982:	d824      	bhi.n	80a19ce <pinAvailable+0x62>
 80a1984:	f000 f886 	bl	80a1a94 <_Z19__fetch_global_Wirev>
 80a1988:	2100      	movs	r1, #0
 80a198a:	7c00      	ldrb	r0, [r0, #16]
 80a198c:	f7fe fef2 	bl	80a0774 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1990:	f080 0001 	eor.w	r0, r0, #1
 80a1994:	b2c0      	uxtb	r0, r0
 80a1996:	e7ee      	b.n	80a1976 <pinAvailable+0xa>
 80a1998:	4e12      	ldr	r6, [pc, #72]	; (80a19e4 <pinAvailable+0x78>)
 80a199a:	7831      	ldrb	r1, [r6, #0]
 80a199c:	f3bf 8f5b 	dmb	ish
 80a19a0:	f011 0501 	ands.w	r5, r1, #1
 80a19a4:	d10d      	bne.n	80a19c2 <pinAvailable+0x56>
 80a19a6:	4630      	mov	r0, r6
 80a19a8:	f7fe fb7b 	bl	80a00a2 <__cxa_guard_acquire>
 80a19ac:	b148      	cbz	r0, 80a19c2 <pinAvailable+0x56>
 80a19ae:	4629      	mov	r1, r5
 80a19b0:	480d      	ldr	r0, [pc, #52]	; (80a19e8 <pinAvailable+0x7c>)
 80a19b2:	f7ff fcc3 	bl	80a133c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a19b6:	4630      	mov	r0, r6
 80a19b8:	f7fe fb78 	bl	80a00ac <__cxa_guard_release>
 80a19bc:	480b      	ldr	r0, [pc, #44]	; (80a19ec <pinAvailable+0x80>)
 80a19be:	f000 fe81 	bl	80a26c4 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a19c2:	4b09      	ldr	r3, [pc, #36]	; (80a19e8 <pinAvailable+0x7c>)
 80a19c4:	7818      	ldrb	r0, [r3, #0]
 80a19c6:	f7fe feef 	bl	80a07a8 <hal_spi_is_enabled>
 80a19ca:	2800      	cmp	r0, #0
 80a19cc:	d1d2      	bne.n	80a1974 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a19ce:	3c12      	subs	r4, #18
 80a19d0:	2c01      	cmp	r4, #1
 80a19d2:	d805      	bhi.n	80a19e0 <pinAvailable+0x74>
 80a19d4:	f000 f8ac 	bl	80a1b30 <_Z22__fetch_global_Serial1v>
 80a19d8:	7c00      	ldrb	r0, [r0, #16]
 80a19da:	f7fe ff15 	bl	80a0808 <hal_usart_is_enabled>
 80a19de:	e7d7      	b.n	80a1990 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a19e0:	2001      	movs	r0, #1
 80a19e2:	e7c8      	b.n	80a1976 <pinAvailable+0xa>
 80a19e4:	20000bf4 	.word	0x20000bf4
 80a19e8:	20000bf8 	.word	0x20000bf8
 80a19ec:	080a195d 	.word	0x080a195d

080a19f0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a19f0:	2817      	cmp	r0, #23
{
 80a19f2:	b538      	push	{r3, r4, r5, lr}
 80a19f4:	4604      	mov	r4, r0
 80a19f6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a19f8:	d80a      	bhi.n	80a1a10 <pinMode+0x20>
 80a19fa:	29ff      	cmp	r1, #255	; 0xff
 80a19fc:	d008      	beq.n	80a1a10 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a19fe:	f7ff ffb5 	bl	80a196c <pinAvailable>
 80a1a02:	b128      	cbz	r0, 80a1a10 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1a04:	4629      	mov	r1, r5
 80a1a06:	4620      	mov	r0, r4
}
 80a1a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1a0c:	f7fe be52 	b.w	80a06b4 <HAL_Pin_Mode>
}
 80a1a10:	bd38      	pop	{r3, r4, r5, pc}

080a1a12 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1a12:	b510      	push	{r4, lr}
 80a1a14:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1a16:	f7fe fe55 	bl	80a06c4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a1a1a:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a1a1c:	b2db      	uxtb	r3, r3
 80a1a1e:	2b01      	cmp	r3, #1
 80a1a20:	d908      	bls.n	80a1a34 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1a22:	4620      	mov	r0, r4
 80a1a24:	f7ff ffa2 	bl	80a196c <pinAvailable>
 80a1a28:	b120      	cbz	r0, 80a1a34 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1a2a:	4620      	mov	r0, r4
}
 80a1a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a1a30:	f7fe be50 	b.w	80a06d4 <HAL_GPIO_Read>
}
 80a1a34:	2000      	movs	r0, #0
 80a1a36:	bd10      	pop	{r4, pc}

080a1a38 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1a38:	b510      	push	{r4, lr}
 80a1a3a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a1a3c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a1a3e:	bf9c      	itt	ls
 80a1a40:	340a      	addls	r4, #10
 80a1a42:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1a44:	4620      	mov	r0, r4
 80a1a46:	f7ff ff91 	bl	80a196c <pinAvailable>
 80a1a4a:	b150      	cbz	r0, 80a1a62 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a1a4c:	2103      	movs	r1, #3
 80a1a4e:	4620      	mov	r0, r4
 80a1a50:	f7fe fe28 	bl	80a06a4 <HAL_Validate_Pin_Function>
 80a1a54:	2803      	cmp	r0, #3
 80a1a56:	d104      	bne.n	80a1a62 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a1a58:	4620      	mov	r0, r4
}
 80a1a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a1a5e:	f7fe be41 	b.w	80a06e4 <hal_adc_read>
}
 80a1a62:	2000      	movs	r0, #0
 80a1a64:	bd10      	pop	{r4, pc}

080a1a66 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1a66:	4770      	bx	lr

080a1a68 <_Z17acquireWireBufferv>:
{
 80a1a68:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1a6a:	2314      	movs	r3, #20
 80a1a6c:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a6e:	4e08      	ldr	r6, [pc, #32]	; (80a1a90 <_Z17acquireWireBufferv+0x28>)
{
 80a1a70:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1a72:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a74:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1a76:	6085      	str	r5, [r0, #8]
 80a1a78:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a7a:	4628      	mov	r0, r5
 80a1a7c:	f000 f87c 	bl	80a1b78 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a80:	4631      	mov	r1, r6
	};
 80a1a82:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1a84:	4628      	mov	r0, r5
 80a1a86:	f000 f877 	bl	80a1b78 <_ZnajRKSt9nothrow_t>
	};
 80a1a8a:	60e0      	str	r0, [r4, #12]
}
 80a1a8c:	4620      	mov	r0, r4
 80a1a8e:	bd70      	pop	{r4, r5, r6, pc}
 80a1a90:	080a2a44 	.word	0x080a2a44

080a1a94 <_Z19__fetch_global_Wirev>:
{
 80a1a94:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1a96:	4d0e      	ldr	r5, [pc, #56]	; (80a1ad0 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1a98:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1a9a:	7829      	ldrb	r1, [r5, #0]
 80a1a9c:	f3bf 8f5b 	dmb	ish
 80a1aa0:	f011 0401 	ands.w	r4, r1, #1
 80a1aa4:	d111      	bne.n	80a1aca <_Z19__fetch_global_Wirev+0x36>
 80a1aa6:	4628      	mov	r0, r5
 80a1aa8:	f7fe fafb 	bl	80a00a2 <__cxa_guard_acquire>
 80a1aac:	b168      	cbz	r0, 80a1aca <_Z19__fetch_global_Wirev+0x36>
 80a1aae:	a801      	add	r0, sp, #4
 80a1ab0:	f7ff ffda 	bl	80a1a68 <_Z17acquireWireBufferv>
 80a1ab4:	4621      	mov	r1, r4
 80a1ab6:	aa01      	add	r2, sp, #4
 80a1ab8:	4806      	ldr	r0, [pc, #24]	; (80a1ad4 <_Z19__fetch_global_Wirev+0x40>)
 80a1aba:	f7ff fad9 	bl	80a1070 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1abe:	4628      	mov	r0, r5
 80a1ac0:	f7fe faf4 	bl	80a00ac <__cxa_guard_release>
 80a1ac4:	4804      	ldr	r0, [pc, #16]	; (80a1ad8 <_Z19__fetch_global_Wirev+0x44>)
 80a1ac6:	f000 fdfd 	bl	80a26c4 <atexit>
	return wire;
}
 80a1aca:	4802      	ldr	r0, [pc, #8]	; (80a1ad4 <_Z19__fetch_global_Wirev+0x40>)
 80a1acc:	b007      	add	sp, #28
 80a1ace:	bd30      	pop	{r4, r5, pc}
 80a1ad0:	20000c08 	.word	0x20000c08
 80a1ad4:	20000c0c 	.word	0x20000c0c
 80a1ad8:	080a1a67 	.word	0x080a1a67

080a1adc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1adc:	2300      	movs	r3, #0
 80a1ade:	b507      	push	{r0, r1, r2, lr}
 80a1ae0:	461a      	mov	r2, r3
 80a1ae2:	4619      	mov	r1, r3
 80a1ae4:	9300      	str	r3, [sp, #0]
 80a1ae6:	4803      	ldr	r0, [pc, #12]	; (80a1af4 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1ae8:	f7ff fb40 	bl	80a116c <_ZN9IPAddressC1Ehhhh>
 80a1aec:	b003      	add	sp, #12
 80a1aee:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1af2:	bf00      	nop
 80a1af4:	20000c20 	.word	0x20000c20

080a1af8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1af8:	4770      	bx	lr
	...

080a1afc <_Z20acquireSerial1Bufferv>:
{
 80a1afc:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a1afe:	2514      	movs	r5, #20
{
 80a1b00:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a1b02:	462a      	mov	r2, r5
 80a1b04:	2100      	movs	r1, #0
 80a1b06:	f000 fdf1 	bl	80a26ec <memset>
 80a1b0a:	8025      	strh	r5, [r4, #0]
 80a1b0c:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1b0e:	4e07      	ldr	r6, [pc, #28]	; (80a1b2c <_Z20acquireSerial1Bufferv+0x30>)
 80a1b10:	4628      	mov	r0, r5
 80a1b12:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a1b14:	8125      	strh	r5, [r4, #8]
 80a1b16:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1b18:	f000 f82e 	bl	80a1b78 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1b1c:	4631      	mov	r1, r6
    };
 80a1b1e:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1b20:	4628      	mov	r0, r5
 80a1b22:	f000 f829 	bl	80a1b78 <_ZnajRKSt9nothrow_t>
    };
 80a1b26:	60e0      	str	r0, [r4, #12]
}
 80a1b28:	4620      	mov	r0, r4
 80a1b2a:	bd70      	pop	{r4, r5, r6, pc}
 80a1b2c:	080a2a44 	.word	0x080a2a44

080a1b30 <_Z22__fetch_global_Serial1v>:
{
 80a1b30:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1b32:	4d0e      	ldr	r5, [pc, #56]	; (80a1b6c <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a1b34:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1b36:	7829      	ldrb	r1, [r5, #0]
 80a1b38:	f3bf 8f5b 	dmb	ish
 80a1b3c:	f011 0401 	ands.w	r4, r1, #1
 80a1b40:	d111      	bne.n	80a1b66 <_Z22__fetch_global_Serial1v+0x36>
 80a1b42:	4628      	mov	r0, r5
 80a1b44:	f7fe faad 	bl	80a00a2 <__cxa_guard_acquire>
 80a1b48:	b168      	cbz	r0, 80a1b66 <_Z22__fetch_global_Serial1v+0x36>
 80a1b4a:	a801      	add	r0, sp, #4
 80a1b4c:	f7ff ffd6 	bl	80a1afc <_Z20acquireSerial1Bufferv>
 80a1b50:	4621      	mov	r1, r4
 80a1b52:	aa01      	add	r2, sp, #4
 80a1b54:	4806      	ldr	r0, [pc, #24]	; (80a1b70 <_Z22__fetch_global_Serial1v+0x40>)
 80a1b56:	f7ff fcc7 	bl	80a14e8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a1b5a:	4628      	mov	r0, r5
 80a1b5c:	f7fe faa6 	bl	80a00ac <__cxa_guard_release>
 80a1b60:	4804      	ldr	r0, [pc, #16]	; (80a1b74 <_Z22__fetch_global_Serial1v+0x44>)
 80a1b62:	f000 fdaf 	bl	80a26c4 <atexit>
    return serial1;
}
 80a1b66:	4802      	ldr	r0, [pc, #8]	; (80a1b70 <_Z22__fetch_global_Serial1v+0x40>)
 80a1b68:	b007      	add	sp, #28
 80a1b6a:	bd30      	pop	{r4, r5, pc}
 80a1b6c:	20000c38 	.word	0x20000c38
 80a1b70:	20000c3c 	.word	0x20000c3c
 80a1b74:	080a1af9 	.word	0x080a1af9

080a1b78 <_ZnajRKSt9nothrow_t>:
 80a1b78:	f7fe ba8f 	b.w	80a009a <_Znaj>

080a1b7c <_ZSt25__throw_bad_function_callv>:
 80a1b7c:	b508      	push	{r3, lr}
 80a1b7e:	f7fe ff5f 	bl	80a0a40 <abort>
	...

080a1b84 <__aeabi_drsub>:
 80a1b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1b88:	e002      	b.n	80a1b90 <__adddf3>
 80a1b8a:	bf00      	nop

080a1b8c <__aeabi_dsub>:
 80a1b8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1b90 <__adddf3>:
 80a1b90:	b530      	push	{r4, r5, lr}
 80a1b92:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1b96:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1b9a:	ea94 0f05 	teq	r4, r5
 80a1b9e:	bf08      	it	eq
 80a1ba0:	ea90 0f02 	teqeq	r0, r2
 80a1ba4:	bf1f      	itttt	ne
 80a1ba6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1baa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1bae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1bb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1bb6:	f000 80e2 	beq.w	80a1d7e <__adddf3+0x1ee>
 80a1bba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1bbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1bc2:	bfb8      	it	lt
 80a1bc4:	426d      	neglt	r5, r5
 80a1bc6:	dd0c      	ble.n	80a1be2 <__adddf3+0x52>
 80a1bc8:	442c      	add	r4, r5
 80a1bca:	ea80 0202 	eor.w	r2, r0, r2
 80a1bce:	ea81 0303 	eor.w	r3, r1, r3
 80a1bd2:	ea82 0000 	eor.w	r0, r2, r0
 80a1bd6:	ea83 0101 	eor.w	r1, r3, r1
 80a1bda:	ea80 0202 	eor.w	r2, r0, r2
 80a1bde:	ea81 0303 	eor.w	r3, r1, r3
 80a1be2:	2d36      	cmp	r5, #54	; 0x36
 80a1be4:	bf88      	it	hi
 80a1be6:	bd30      	pophi	{r4, r5, pc}
 80a1be8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1bec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1bf0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1bf4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1bf8:	d002      	beq.n	80a1c00 <__adddf3+0x70>
 80a1bfa:	4240      	negs	r0, r0
 80a1bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1c00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1c04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1c08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1c0c:	d002      	beq.n	80a1c14 <__adddf3+0x84>
 80a1c0e:	4252      	negs	r2, r2
 80a1c10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1c14:	ea94 0f05 	teq	r4, r5
 80a1c18:	f000 80a7 	beq.w	80a1d6a <__adddf3+0x1da>
 80a1c1c:	f1a4 0401 	sub.w	r4, r4, #1
 80a1c20:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1c24:	db0d      	blt.n	80a1c42 <__adddf3+0xb2>
 80a1c26:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1c2a:	fa22 f205 	lsr.w	r2, r2, r5
 80a1c2e:	1880      	adds	r0, r0, r2
 80a1c30:	f141 0100 	adc.w	r1, r1, #0
 80a1c34:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1c38:	1880      	adds	r0, r0, r2
 80a1c3a:	fa43 f305 	asr.w	r3, r3, r5
 80a1c3e:	4159      	adcs	r1, r3
 80a1c40:	e00e      	b.n	80a1c60 <__adddf3+0xd0>
 80a1c42:	f1a5 0520 	sub.w	r5, r5, #32
 80a1c46:	f10e 0e20 	add.w	lr, lr, #32
 80a1c4a:	2a01      	cmp	r2, #1
 80a1c4c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1c50:	bf28      	it	cs
 80a1c52:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1c56:	fa43 f305 	asr.w	r3, r3, r5
 80a1c5a:	18c0      	adds	r0, r0, r3
 80a1c5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1c60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1c64:	d507      	bpl.n	80a1c76 <__adddf3+0xe6>
 80a1c66:	f04f 0e00 	mov.w	lr, #0
 80a1c6a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1c6e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1c72:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1c76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1c7a:	d31b      	bcc.n	80a1cb4 <__adddf3+0x124>
 80a1c7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1c80:	d30c      	bcc.n	80a1c9c <__adddf3+0x10c>
 80a1c82:	0849      	lsrs	r1, r1, #1
 80a1c84:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1c88:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1c8c:	f104 0401 	add.w	r4, r4, #1
 80a1c90:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1c94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1c98:	f080 809a 	bcs.w	80a1dd0 <__adddf3+0x240>
 80a1c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1ca0:	bf08      	it	eq
 80a1ca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1ca6:	f150 0000 	adcs.w	r0, r0, #0
 80a1caa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1cae:	ea41 0105 	orr.w	r1, r1, r5
 80a1cb2:	bd30      	pop	{r4, r5, pc}
 80a1cb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1cb8:	4140      	adcs	r0, r0
 80a1cba:	eb41 0101 	adc.w	r1, r1, r1
 80a1cbe:	3c01      	subs	r4, #1
 80a1cc0:	bf28      	it	cs
 80a1cc2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1cc6:	d2e9      	bcs.n	80a1c9c <__adddf3+0x10c>
 80a1cc8:	f091 0f00 	teq	r1, #0
 80a1ccc:	bf04      	itt	eq
 80a1cce:	4601      	moveq	r1, r0
 80a1cd0:	2000      	moveq	r0, #0
 80a1cd2:	fab1 f381 	clz	r3, r1
 80a1cd6:	bf08      	it	eq
 80a1cd8:	3320      	addeq	r3, #32
 80a1cda:	f1a3 030b 	sub.w	r3, r3, #11
 80a1cde:	f1b3 0220 	subs.w	r2, r3, #32
 80a1ce2:	da0c      	bge.n	80a1cfe <__adddf3+0x16e>
 80a1ce4:	320c      	adds	r2, #12
 80a1ce6:	dd08      	ble.n	80a1cfa <__adddf3+0x16a>
 80a1ce8:	f102 0c14 	add.w	ip, r2, #20
 80a1cec:	f1c2 020c 	rsb	r2, r2, #12
 80a1cf0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1cf4:	fa21 f102 	lsr.w	r1, r1, r2
 80a1cf8:	e00c      	b.n	80a1d14 <__adddf3+0x184>
 80a1cfa:	f102 0214 	add.w	r2, r2, #20
 80a1cfe:	bfd8      	it	le
 80a1d00:	f1c2 0c20 	rsble	ip, r2, #32
 80a1d04:	fa01 f102 	lsl.w	r1, r1, r2
 80a1d08:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1d0c:	bfdc      	itt	le
 80a1d0e:	ea41 010c 	orrle.w	r1, r1, ip
 80a1d12:	4090      	lslle	r0, r2
 80a1d14:	1ae4      	subs	r4, r4, r3
 80a1d16:	bfa2      	ittt	ge
 80a1d18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1d1c:	4329      	orrge	r1, r5
 80a1d1e:	bd30      	popge	{r4, r5, pc}
 80a1d20:	ea6f 0404 	mvn.w	r4, r4
 80a1d24:	3c1f      	subs	r4, #31
 80a1d26:	da1c      	bge.n	80a1d62 <__adddf3+0x1d2>
 80a1d28:	340c      	adds	r4, #12
 80a1d2a:	dc0e      	bgt.n	80a1d4a <__adddf3+0x1ba>
 80a1d2c:	f104 0414 	add.w	r4, r4, #20
 80a1d30:	f1c4 0220 	rsb	r2, r4, #32
 80a1d34:	fa20 f004 	lsr.w	r0, r0, r4
 80a1d38:	fa01 f302 	lsl.w	r3, r1, r2
 80a1d3c:	ea40 0003 	orr.w	r0, r0, r3
 80a1d40:	fa21 f304 	lsr.w	r3, r1, r4
 80a1d44:	ea45 0103 	orr.w	r1, r5, r3
 80a1d48:	bd30      	pop	{r4, r5, pc}
 80a1d4a:	f1c4 040c 	rsb	r4, r4, #12
 80a1d4e:	f1c4 0220 	rsb	r2, r4, #32
 80a1d52:	fa20 f002 	lsr.w	r0, r0, r2
 80a1d56:	fa01 f304 	lsl.w	r3, r1, r4
 80a1d5a:	ea40 0003 	orr.w	r0, r0, r3
 80a1d5e:	4629      	mov	r1, r5
 80a1d60:	bd30      	pop	{r4, r5, pc}
 80a1d62:	fa21 f004 	lsr.w	r0, r1, r4
 80a1d66:	4629      	mov	r1, r5
 80a1d68:	bd30      	pop	{r4, r5, pc}
 80a1d6a:	f094 0f00 	teq	r4, #0
 80a1d6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1d72:	bf06      	itte	eq
 80a1d74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1d78:	3401      	addeq	r4, #1
 80a1d7a:	3d01      	subne	r5, #1
 80a1d7c:	e74e      	b.n	80a1c1c <__adddf3+0x8c>
 80a1d7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1d82:	bf18      	it	ne
 80a1d84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1d88:	d029      	beq.n	80a1dde <__adddf3+0x24e>
 80a1d8a:	ea94 0f05 	teq	r4, r5
 80a1d8e:	bf08      	it	eq
 80a1d90:	ea90 0f02 	teqeq	r0, r2
 80a1d94:	d005      	beq.n	80a1da2 <__adddf3+0x212>
 80a1d96:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1d9a:	bf04      	itt	eq
 80a1d9c:	4619      	moveq	r1, r3
 80a1d9e:	4610      	moveq	r0, r2
 80a1da0:	bd30      	pop	{r4, r5, pc}
 80a1da2:	ea91 0f03 	teq	r1, r3
 80a1da6:	bf1e      	ittt	ne
 80a1da8:	2100      	movne	r1, #0
 80a1daa:	2000      	movne	r0, #0
 80a1dac:	bd30      	popne	{r4, r5, pc}
 80a1dae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1db2:	d105      	bne.n	80a1dc0 <__adddf3+0x230>
 80a1db4:	0040      	lsls	r0, r0, #1
 80a1db6:	4149      	adcs	r1, r1
 80a1db8:	bf28      	it	cs
 80a1dba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1dbe:	bd30      	pop	{r4, r5, pc}
 80a1dc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1dc4:	bf3c      	itt	cc
 80a1dc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1dca:	bd30      	popcc	{r4, r5, pc}
 80a1dcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1dd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1dd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1dd8:	f04f 0000 	mov.w	r0, #0
 80a1ddc:	bd30      	pop	{r4, r5, pc}
 80a1dde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1de2:	bf1a      	itte	ne
 80a1de4:	4619      	movne	r1, r3
 80a1de6:	4610      	movne	r0, r2
 80a1de8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1dec:	bf1c      	itt	ne
 80a1dee:	460b      	movne	r3, r1
 80a1df0:	4602      	movne	r2, r0
 80a1df2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1df6:	bf06      	itte	eq
 80a1df8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1dfc:	ea91 0f03 	teqeq	r1, r3
 80a1e00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1e04:	bd30      	pop	{r4, r5, pc}
 80a1e06:	bf00      	nop

080a1e08 <__aeabi_ui2d>:
 80a1e08:	f090 0f00 	teq	r0, #0
 80a1e0c:	bf04      	itt	eq
 80a1e0e:	2100      	moveq	r1, #0
 80a1e10:	4770      	bxeq	lr
 80a1e12:	b530      	push	{r4, r5, lr}
 80a1e14:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e18:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e1c:	f04f 0500 	mov.w	r5, #0
 80a1e20:	f04f 0100 	mov.w	r1, #0
 80a1e24:	e750      	b.n	80a1cc8 <__adddf3+0x138>
 80a1e26:	bf00      	nop

080a1e28 <__aeabi_i2d>:
 80a1e28:	f090 0f00 	teq	r0, #0
 80a1e2c:	bf04      	itt	eq
 80a1e2e:	2100      	moveq	r1, #0
 80a1e30:	4770      	bxeq	lr
 80a1e32:	b530      	push	{r4, r5, lr}
 80a1e34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e38:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1e40:	bf48      	it	mi
 80a1e42:	4240      	negmi	r0, r0
 80a1e44:	f04f 0100 	mov.w	r1, #0
 80a1e48:	e73e      	b.n	80a1cc8 <__adddf3+0x138>
 80a1e4a:	bf00      	nop

080a1e4c <__aeabi_f2d>:
 80a1e4c:	0042      	lsls	r2, r0, #1
 80a1e4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1e52:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1e56:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1e5a:	bf1f      	itttt	ne
 80a1e5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1e60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1e64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1e68:	4770      	bxne	lr
 80a1e6a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a1e6e:	bf08      	it	eq
 80a1e70:	4770      	bxeq	lr
 80a1e72:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1e76:	bf04      	itt	eq
 80a1e78:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1e7c:	4770      	bxeq	lr
 80a1e7e:	b530      	push	{r4, r5, lr}
 80a1e80:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1e84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1e88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1e8c:	e71c      	b.n	80a1cc8 <__adddf3+0x138>
 80a1e8e:	bf00      	nop

080a1e90 <__aeabi_ul2d>:
 80a1e90:	ea50 0201 	orrs.w	r2, r0, r1
 80a1e94:	bf08      	it	eq
 80a1e96:	4770      	bxeq	lr
 80a1e98:	b530      	push	{r4, r5, lr}
 80a1e9a:	f04f 0500 	mov.w	r5, #0
 80a1e9e:	e00a      	b.n	80a1eb6 <__aeabi_l2d+0x16>

080a1ea0 <__aeabi_l2d>:
 80a1ea0:	ea50 0201 	orrs.w	r2, r0, r1
 80a1ea4:	bf08      	it	eq
 80a1ea6:	4770      	bxeq	lr
 80a1ea8:	b530      	push	{r4, r5, lr}
 80a1eaa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1eae:	d502      	bpl.n	80a1eb6 <__aeabi_l2d+0x16>
 80a1eb0:	4240      	negs	r0, r0
 80a1eb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1eb6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1eba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1ebe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1ec2:	f43f aed8 	beq.w	80a1c76 <__adddf3+0xe6>
 80a1ec6:	f04f 0203 	mov.w	r2, #3
 80a1eca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1ece:	bf18      	it	ne
 80a1ed0:	3203      	addne	r2, #3
 80a1ed2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1ed6:	bf18      	it	ne
 80a1ed8:	3203      	addne	r2, #3
 80a1eda:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1ede:	f1c2 0320 	rsb	r3, r2, #32
 80a1ee2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1ee6:	fa20 f002 	lsr.w	r0, r0, r2
 80a1eea:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1eee:	ea40 000e 	orr.w	r0, r0, lr
 80a1ef2:	fa21 f102 	lsr.w	r1, r1, r2
 80a1ef6:	4414      	add	r4, r2
 80a1ef8:	e6bd      	b.n	80a1c76 <__adddf3+0xe6>
 80a1efa:	bf00      	nop

080a1efc <__aeabi_dmul>:
 80a1efc:	b570      	push	{r4, r5, r6, lr}
 80a1efe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1f02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1f06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1f0a:	bf1d      	ittte	ne
 80a1f0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1f10:	ea94 0f0c 	teqne	r4, ip
 80a1f14:	ea95 0f0c 	teqne	r5, ip
 80a1f18:	f000 f8de 	bleq	80a20d8 <__aeabi_dmul+0x1dc>
 80a1f1c:	442c      	add	r4, r5
 80a1f1e:	ea81 0603 	eor.w	r6, r1, r3
 80a1f22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1f26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1f2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1f2e:	bf18      	it	ne
 80a1f30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1f34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1f3c:	d038      	beq.n	80a1fb0 <__aeabi_dmul+0xb4>
 80a1f3e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1f42:	f04f 0500 	mov.w	r5, #0
 80a1f46:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1f4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1f4e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1f52:	f04f 0600 	mov.w	r6, #0
 80a1f56:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1f5a:	f09c 0f00 	teq	ip, #0
 80a1f5e:	bf18      	it	ne
 80a1f60:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1f64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1f68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1f6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1f70:	d204      	bcs.n	80a1f7c <__aeabi_dmul+0x80>
 80a1f72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1f76:	416d      	adcs	r5, r5
 80a1f78:	eb46 0606 	adc.w	r6, r6, r6
 80a1f7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1f80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1f84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1f88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1f8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1f90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1f94:	bf88      	it	hi
 80a1f96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1f9a:	d81e      	bhi.n	80a1fda <__aeabi_dmul+0xde>
 80a1f9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1fa0:	bf08      	it	eq
 80a1fa2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1fa6:	f150 0000 	adcs.w	r0, r0, #0
 80a1faa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1fae:	bd70      	pop	{r4, r5, r6, pc}
 80a1fb0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1fb4:	ea46 0101 	orr.w	r1, r6, r1
 80a1fb8:	ea40 0002 	orr.w	r0, r0, r2
 80a1fbc:	ea81 0103 	eor.w	r1, r1, r3
 80a1fc0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1fc4:	bfc2      	ittt	gt
 80a1fc6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1fca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1fce:	bd70      	popgt	{r4, r5, r6, pc}
 80a1fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1fd4:	f04f 0e00 	mov.w	lr, #0
 80a1fd8:	3c01      	subs	r4, #1
 80a1fda:	f300 80ab 	bgt.w	80a2134 <__aeabi_dmul+0x238>
 80a1fde:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1fe2:	bfde      	ittt	le
 80a1fe4:	2000      	movle	r0, #0
 80a1fe6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1fea:	bd70      	pople	{r4, r5, r6, pc}
 80a1fec:	f1c4 0400 	rsb	r4, r4, #0
 80a1ff0:	3c20      	subs	r4, #32
 80a1ff2:	da35      	bge.n	80a2060 <__aeabi_dmul+0x164>
 80a1ff4:	340c      	adds	r4, #12
 80a1ff6:	dc1b      	bgt.n	80a2030 <__aeabi_dmul+0x134>
 80a1ff8:	f104 0414 	add.w	r4, r4, #20
 80a1ffc:	f1c4 0520 	rsb	r5, r4, #32
 80a2000:	fa00 f305 	lsl.w	r3, r0, r5
 80a2004:	fa20 f004 	lsr.w	r0, r0, r4
 80a2008:	fa01 f205 	lsl.w	r2, r1, r5
 80a200c:	ea40 0002 	orr.w	r0, r0, r2
 80a2010:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2018:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a201c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2020:	eb42 0106 	adc.w	r1, r2, r6
 80a2024:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2028:	bf08      	it	eq
 80a202a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a202e:	bd70      	pop	{r4, r5, r6, pc}
 80a2030:	f1c4 040c 	rsb	r4, r4, #12
 80a2034:	f1c4 0520 	rsb	r5, r4, #32
 80a2038:	fa00 f304 	lsl.w	r3, r0, r4
 80a203c:	fa20 f005 	lsr.w	r0, r0, r5
 80a2040:	fa01 f204 	lsl.w	r2, r1, r4
 80a2044:	ea40 0002 	orr.w	r0, r0, r2
 80a2048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a204c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2050:	f141 0100 	adc.w	r1, r1, #0
 80a2054:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2058:	bf08      	it	eq
 80a205a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a205e:	bd70      	pop	{r4, r5, r6, pc}
 80a2060:	f1c4 0520 	rsb	r5, r4, #32
 80a2064:	fa00 f205 	lsl.w	r2, r0, r5
 80a2068:	ea4e 0e02 	orr.w	lr, lr, r2
 80a206c:	fa20 f304 	lsr.w	r3, r0, r4
 80a2070:	fa01 f205 	lsl.w	r2, r1, r5
 80a2074:	ea43 0302 	orr.w	r3, r3, r2
 80a2078:	fa21 f004 	lsr.w	r0, r1, r4
 80a207c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2080:	fa21 f204 	lsr.w	r2, r1, r4
 80a2084:	ea20 0002 	bic.w	r0, r0, r2
 80a2088:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a208c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2090:	bf08      	it	eq
 80a2092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2096:	bd70      	pop	{r4, r5, r6, pc}
 80a2098:	f094 0f00 	teq	r4, #0
 80a209c:	d10f      	bne.n	80a20be <__aeabi_dmul+0x1c2>
 80a209e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a20a2:	0040      	lsls	r0, r0, #1
 80a20a4:	eb41 0101 	adc.w	r1, r1, r1
 80a20a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a20ac:	bf08      	it	eq
 80a20ae:	3c01      	subeq	r4, #1
 80a20b0:	d0f7      	beq.n	80a20a2 <__aeabi_dmul+0x1a6>
 80a20b2:	ea41 0106 	orr.w	r1, r1, r6
 80a20b6:	f095 0f00 	teq	r5, #0
 80a20ba:	bf18      	it	ne
 80a20bc:	4770      	bxne	lr
 80a20be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a20c2:	0052      	lsls	r2, r2, #1
 80a20c4:	eb43 0303 	adc.w	r3, r3, r3
 80a20c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a20cc:	bf08      	it	eq
 80a20ce:	3d01      	subeq	r5, #1
 80a20d0:	d0f7      	beq.n	80a20c2 <__aeabi_dmul+0x1c6>
 80a20d2:	ea43 0306 	orr.w	r3, r3, r6
 80a20d6:	4770      	bx	lr
 80a20d8:	ea94 0f0c 	teq	r4, ip
 80a20dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a20e0:	bf18      	it	ne
 80a20e2:	ea95 0f0c 	teqne	r5, ip
 80a20e6:	d00c      	beq.n	80a2102 <__aeabi_dmul+0x206>
 80a20e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a20ec:	bf18      	it	ne
 80a20ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a20f2:	d1d1      	bne.n	80a2098 <__aeabi_dmul+0x19c>
 80a20f4:	ea81 0103 	eor.w	r1, r1, r3
 80a20f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a20fc:	f04f 0000 	mov.w	r0, #0
 80a2100:	bd70      	pop	{r4, r5, r6, pc}
 80a2102:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2106:	bf06      	itte	eq
 80a2108:	4610      	moveq	r0, r2
 80a210a:	4619      	moveq	r1, r3
 80a210c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2110:	d019      	beq.n	80a2146 <__aeabi_dmul+0x24a>
 80a2112:	ea94 0f0c 	teq	r4, ip
 80a2116:	d102      	bne.n	80a211e <__aeabi_dmul+0x222>
 80a2118:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a211c:	d113      	bne.n	80a2146 <__aeabi_dmul+0x24a>
 80a211e:	ea95 0f0c 	teq	r5, ip
 80a2122:	d105      	bne.n	80a2130 <__aeabi_dmul+0x234>
 80a2124:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2128:	bf1c      	itt	ne
 80a212a:	4610      	movne	r0, r2
 80a212c:	4619      	movne	r1, r3
 80a212e:	d10a      	bne.n	80a2146 <__aeabi_dmul+0x24a>
 80a2130:	ea81 0103 	eor.w	r1, r1, r3
 80a2134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2138:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a213c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2140:	f04f 0000 	mov.w	r0, #0
 80a2144:	bd70      	pop	{r4, r5, r6, pc}
 80a2146:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a214a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a214e:	bd70      	pop	{r4, r5, r6, pc}

080a2150 <__aeabi_ddiv>:
 80a2150:	b570      	push	{r4, r5, r6, lr}
 80a2152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a215a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a215e:	bf1d      	ittte	ne
 80a2160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2164:	ea94 0f0c 	teqne	r4, ip
 80a2168:	ea95 0f0c 	teqne	r5, ip
 80a216c:	f000 f8a7 	bleq	80a22be <__aeabi_ddiv+0x16e>
 80a2170:	eba4 0405 	sub.w	r4, r4, r5
 80a2174:	ea81 0e03 	eor.w	lr, r1, r3
 80a2178:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a217c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2180:	f000 8088 	beq.w	80a2294 <__aeabi_ddiv+0x144>
 80a2184:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2188:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a218c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2190:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2194:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2198:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a219c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a21a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a21a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a21a8:	429d      	cmp	r5, r3
 80a21aa:	bf08      	it	eq
 80a21ac:	4296      	cmpeq	r6, r2
 80a21ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a21b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a21b6:	d202      	bcs.n	80a21be <__aeabi_ddiv+0x6e>
 80a21b8:	085b      	lsrs	r3, r3, #1
 80a21ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21be:	1ab6      	subs	r6, r6, r2
 80a21c0:	eb65 0503 	sbc.w	r5, r5, r3
 80a21c4:	085b      	lsrs	r3, r3, #1
 80a21c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a21ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a21d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a21d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a21da:	bf22      	ittt	cs
 80a21dc:	1ab6      	subcs	r6, r6, r2
 80a21de:	4675      	movcs	r5, lr
 80a21e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a21e4:	085b      	lsrs	r3, r3, #1
 80a21e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80a21ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a21f2:	bf22      	ittt	cs
 80a21f4:	1ab6      	subcs	r6, r6, r2
 80a21f6:	4675      	movcs	r5, lr
 80a21f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a21fc:	085b      	lsrs	r3, r3, #1
 80a21fe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2202:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2206:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a220a:	bf22      	ittt	cs
 80a220c:	1ab6      	subcs	r6, r6, r2
 80a220e:	4675      	movcs	r5, lr
 80a2210:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2214:	085b      	lsrs	r3, r3, #1
 80a2216:	ea4f 0232 	mov.w	r2, r2, rrx
 80a221a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a221e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2222:	bf22      	ittt	cs
 80a2224:	1ab6      	subcs	r6, r6, r2
 80a2226:	4675      	movcs	r5, lr
 80a2228:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a222c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2230:	d018      	beq.n	80a2264 <__aeabi_ddiv+0x114>
 80a2232:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2236:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a223a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a223e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2242:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2246:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a224a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a224e:	d1c0      	bne.n	80a21d2 <__aeabi_ddiv+0x82>
 80a2250:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2254:	d10b      	bne.n	80a226e <__aeabi_ddiv+0x11e>
 80a2256:	ea41 0100 	orr.w	r1, r1, r0
 80a225a:	f04f 0000 	mov.w	r0, #0
 80a225e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2262:	e7b6      	b.n	80a21d2 <__aeabi_ddiv+0x82>
 80a2264:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2268:	bf04      	itt	eq
 80a226a:	4301      	orreq	r1, r0
 80a226c:	2000      	moveq	r0, #0
 80a226e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2272:	bf88      	it	hi
 80a2274:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2278:	f63f aeaf 	bhi.w	80a1fda <__aeabi_dmul+0xde>
 80a227c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2280:	bf04      	itt	eq
 80a2282:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2286:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a228a:	f150 0000 	adcs.w	r0, r0, #0
 80a228e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2292:	bd70      	pop	{r4, r5, r6, pc}
 80a2294:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2298:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a229c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a22a0:	bfc2      	ittt	gt
 80a22a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a22a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a22aa:	bd70      	popgt	{r4, r5, r6, pc}
 80a22ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a22b0:	f04f 0e00 	mov.w	lr, #0
 80a22b4:	3c01      	subs	r4, #1
 80a22b6:	e690      	b.n	80a1fda <__aeabi_dmul+0xde>
 80a22b8:	ea45 0e06 	orr.w	lr, r5, r6
 80a22bc:	e68d      	b.n	80a1fda <__aeabi_dmul+0xde>
 80a22be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a22c2:	ea94 0f0c 	teq	r4, ip
 80a22c6:	bf08      	it	eq
 80a22c8:	ea95 0f0c 	teqeq	r5, ip
 80a22cc:	f43f af3b 	beq.w	80a2146 <__aeabi_dmul+0x24a>
 80a22d0:	ea94 0f0c 	teq	r4, ip
 80a22d4:	d10a      	bne.n	80a22ec <__aeabi_ddiv+0x19c>
 80a22d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a22da:	f47f af34 	bne.w	80a2146 <__aeabi_dmul+0x24a>
 80a22de:	ea95 0f0c 	teq	r5, ip
 80a22e2:	f47f af25 	bne.w	80a2130 <__aeabi_dmul+0x234>
 80a22e6:	4610      	mov	r0, r2
 80a22e8:	4619      	mov	r1, r3
 80a22ea:	e72c      	b.n	80a2146 <__aeabi_dmul+0x24a>
 80a22ec:	ea95 0f0c 	teq	r5, ip
 80a22f0:	d106      	bne.n	80a2300 <__aeabi_ddiv+0x1b0>
 80a22f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a22f6:	f43f aefd 	beq.w	80a20f4 <__aeabi_dmul+0x1f8>
 80a22fa:	4610      	mov	r0, r2
 80a22fc:	4619      	mov	r1, r3
 80a22fe:	e722      	b.n	80a2146 <__aeabi_dmul+0x24a>
 80a2300:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2304:	bf18      	it	ne
 80a2306:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a230a:	f47f aec5 	bne.w	80a2098 <__aeabi_dmul+0x19c>
 80a230e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2312:	f47f af0d 	bne.w	80a2130 <__aeabi_dmul+0x234>
 80a2316:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a231a:	f47f aeeb 	bne.w	80a20f4 <__aeabi_dmul+0x1f8>
 80a231e:	e712      	b.n	80a2146 <__aeabi_dmul+0x24a>

080a2320 <__aeabi_d2iz>:
 80a2320:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2324:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2328:	d215      	bcs.n	80a2356 <__aeabi_d2iz+0x36>
 80a232a:	d511      	bpl.n	80a2350 <__aeabi_d2iz+0x30>
 80a232c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2330:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2334:	d912      	bls.n	80a235c <__aeabi_d2iz+0x3c>
 80a2336:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a233a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a233e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2342:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2346:	fa23 f002 	lsr.w	r0, r3, r2
 80a234a:	bf18      	it	ne
 80a234c:	4240      	negne	r0, r0
 80a234e:	4770      	bx	lr
 80a2350:	f04f 0000 	mov.w	r0, #0
 80a2354:	4770      	bx	lr
 80a2356:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a235a:	d105      	bne.n	80a2368 <__aeabi_d2iz+0x48>
 80a235c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2360:	bf08      	it	eq
 80a2362:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2366:	4770      	bx	lr
 80a2368:	f04f 0000 	mov.w	r0, #0
 80a236c:	4770      	bx	lr
 80a236e:	bf00      	nop

080a2370 <__aeabi_frsub>:
 80a2370:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2374:	e002      	b.n	80a237c <__addsf3>
 80a2376:	bf00      	nop

080a2378 <__aeabi_fsub>:
 80a2378:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a237c <__addsf3>:
 80a237c:	0042      	lsls	r2, r0, #1
 80a237e:	bf1f      	itttt	ne
 80a2380:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2384:	ea92 0f03 	teqne	r2, r3
 80a2388:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a238c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2390:	d06a      	beq.n	80a2468 <__addsf3+0xec>
 80a2392:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2396:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a239a:	bfc1      	itttt	gt
 80a239c:	18d2      	addgt	r2, r2, r3
 80a239e:	4041      	eorgt	r1, r0
 80a23a0:	4048      	eorgt	r0, r1
 80a23a2:	4041      	eorgt	r1, r0
 80a23a4:	bfb8      	it	lt
 80a23a6:	425b      	neglt	r3, r3
 80a23a8:	2b19      	cmp	r3, #25
 80a23aa:	bf88      	it	hi
 80a23ac:	4770      	bxhi	lr
 80a23ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a23b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a23b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a23ba:	bf18      	it	ne
 80a23bc:	4240      	negne	r0, r0
 80a23be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a23c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a23c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a23ca:	bf18      	it	ne
 80a23cc:	4249      	negne	r1, r1
 80a23ce:	ea92 0f03 	teq	r2, r3
 80a23d2:	d03f      	beq.n	80a2454 <__addsf3+0xd8>
 80a23d4:	f1a2 0201 	sub.w	r2, r2, #1
 80a23d8:	fa41 fc03 	asr.w	ip, r1, r3
 80a23dc:	eb10 000c 	adds.w	r0, r0, ip
 80a23e0:	f1c3 0320 	rsb	r3, r3, #32
 80a23e4:	fa01 f103 	lsl.w	r1, r1, r3
 80a23e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a23ec:	d502      	bpl.n	80a23f4 <__addsf3+0x78>
 80a23ee:	4249      	negs	r1, r1
 80a23f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a23f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a23f8:	d313      	bcc.n	80a2422 <__addsf3+0xa6>
 80a23fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a23fe:	d306      	bcc.n	80a240e <__addsf3+0x92>
 80a2400:	0840      	lsrs	r0, r0, #1
 80a2402:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2406:	f102 0201 	add.w	r2, r2, #1
 80a240a:	2afe      	cmp	r2, #254	; 0xfe
 80a240c:	d251      	bcs.n	80a24b2 <__addsf3+0x136>
 80a240e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2412:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2416:	bf08      	it	eq
 80a2418:	f020 0001 	biceq.w	r0, r0, #1
 80a241c:	ea40 0003 	orr.w	r0, r0, r3
 80a2420:	4770      	bx	lr
 80a2422:	0049      	lsls	r1, r1, #1
 80a2424:	eb40 0000 	adc.w	r0, r0, r0
 80a2428:	3a01      	subs	r2, #1
 80a242a:	bf28      	it	cs
 80a242c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a2430:	d2ed      	bcs.n	80a240e <__addsf3+0x92>
 80a2432:	fab0 fc80 	clz	ip, r0
 80a2436:	f1ac 0c08 	sub.w	ip, ip, #8
 80a243a:	ebb2 020c 	subs.w	r2, r2, ip
 80a243e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2442:	bfaa      	itet	ge
 80a2444:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2448:	4252      	neglt	r2, r2
 80a244a:	4318      	orrge	r0, r3
 80a244c:	bfbc      	itt	lt
 80a244e:	40d0      	lsrlt	r0, r2
 80a2450:	4318      	orrlt	r0, r3
 80a2452:	4770      	bx	lr
 80a2454:	f092 0f00 	teq	r2, #0
 80a2458:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a245c:	bf06      	itte	eq
 80a245e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2462:	3201      	addeq	r2, #1
 80a2464:	3b01      	subne	r3, #1
 80a2466:	e7b5      	b.n	80a23d4 <__addsf3+0x58>
 80a2468:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a246c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2470:	bf18      	it	ne
 80a2472:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2476:	d021      	beq.n	80a24bc <__addsf3+0x140>
 80a2478:	ea92 0f03 	teq	r2, r3
 80a247c:	d004      	beq.n	80a2488 <__addsf3+0x10c>
 80a247e:	f092 0f00 	teq	r2, #0
 80a2482:	bf08      	it	eq
 80a2484:	4608      	moveq	r0, r1
 80a2486:	4770      	bx	lr
 80a2488:	ea90 0f01 	teq	r0, r1
 80a248c:	bf1c      	itt	ne
 80a248e:	2000      	movne	r0, #0
 80a2490:	4770      	bxne	lr
 80a2492:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2496:	d104      	bne.n	80a24a2 <__addsf3+0x126>
 80a2498:	0040      	lsls	r0, r0, #1
 80a249a:	bf28      	it	cs
 80a249c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a24a0:	4770      	bx	lr
 80a24a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a24a6:	bf3c      	itt	cc
 80a24a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a24ac:	4770      	bxcc	lr
 80a24ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a24b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a24b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a24ba:	4770      	bx	lr
 80a24bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a24c0:	bf16      	itet	ne
 80a24c2:	4608      	movne	r0, r1
 80a24c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a24c8:	4601      	movne	r1, r0
 80a24ca:	0242      	lsls	r2, r0, #9
 80a24cc:	bf06      	itte	eq
 80a24ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a24d2:	ea90 0f01 	teqeq	r0, r1
 80a24d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a24da:	4770      	bx	lr

080a24dc <__aeabi_ui2f>:
 80a24dc:	f04f 0300 	mov.w	r3, #0
 80a24e0:	e004      	b.n	80a24ec <__aeabi_i2f+0x8>
 80a24e2:	bf00      	nop

080a24e4 <__aeabi_i2f>:
 80a24e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a24e8:	bf48      	it	mi
 80a24ea:	4240      	negmi	r0, r0
 80a24ec:	ea5f 0c00 	movs.w	ip, r0
 80a24f0:	bf08      	it	eq
 80a24f2:	4770      	bxeq	lr
 80a24f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a24f8:	4601      	mov	r1, r0
 80a24fa:	f04f 0000 	mov.w	r0, #0
 80a24fe:	e01c      	b.n	80a253a <__aeabi_l2f+0x2a>

080a2500 <__aeabi_ul2f>:
 80a2500:	ea50 0201 	orrs.w	r2, r0, r1
 80a2504:	bf08      	it	eq
 80a2506:	4770      	bxeq	lr
 80a2508:	f04f 0300 	mov.w	r3, #0
 80a250c:	e00a      	b.n	80a2524 <__aeabi_l2f+0x14>
 80a250e:	bf00      	nop

080a2510 <__aeabi_l2f>:
 80a2510:	ea50 0201 	orrs.w	r2, r0, r1
 80a2514:	bf08      	it	eq
 80a2516:	4770      	bxeq	lr
 80a2518:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a251c:	d502      	bpl.n	80a2524 <__aeabi_l2f+0x14>
 80a251e:	4240      	negs	r0, r0
 80a2520:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2524:	ea5f 0c01 	movs.w	ip, r1
 80a2528:	bf02      	ittt	eq
 80a252a:	4684      	moveq	ip, r0
 80a252c:	4601      	moveq	r1, r0
 80a252e:	2000      	moveq	r0, #0
 80a2530:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2534:	bf08      	it	eq
 80a2536:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a253a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a253e:	fabc f28c 	clz	r2, ip
 80a2542:	3a08      	subs	r2, #8
 80a2544:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2548:	db10      	blt.n	80a256c <__aeabi_l2f+0x5c>
 80a254a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a254e:	4463      	add	r3, ip
 80a2550:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2554:	f1c2 0220 	rsb	r2, r2, #32
 80a2558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a255c:	fa20 f202 	lsr.w	r2, r0, r2
 80a2560:	eb43 0002 	adc.w	r0, r3, r2
 80a2564:	bf08      	it	eq
 80a2566:	f020 0001 	biceq.w	r0, r0, #1
 80a256a:	4770      	bx	lr
 80a256c:	f102 0220 	add.w	r2, r2, #32
 80a2570:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2574:	f1c2 0220 	rsb	r2, r2, #32
 80a2578:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a257c:	fa21 f202 	lsr.w	r2, r1, r2
 80a2580:	eb43 0002 	adc.w	r0, r3, r2
 80a2584:	bf08      	it	eq
 80a2586:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a258a:	4770      	bx	lr

080a258c <__gesf2>:
 80a258c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2590:	e006      	b.n	80a25a0 <__cmpsf2+0x4>
 80a2592:	bf00      	nop

080a2594 <__lesf2>:
 80a2594:	f04f 0c01 	mov.w	ip, #1
 80a2598:	e002      	b.n	80a25a0 <__cmpsf2+0x4>
 80a259a:	bf00      	nop

080a259c <__cmpsf2>:
 80a259c:	f04f 0c01 	mov.w	ip, #1
 80a25a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a25a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a25a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a25ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a25b0:	bf18      	it	ne
 80a25b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a25b6:	d011      	beq.n	80a25dc <__cmpsf2+0x40>
 80a25b8:	b001      	add	sp, #4
 80a25ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a25be:	bf18      	it	ne
 80a25c0:	ea90 0f01 	teqne	r0, r1
 80a25c4:	bf58      	it	pl
 80a25c6:	ebb2 0003 	subspl.w	r0, r2, r3
 80a25ca:	bf88      	it	hi
 80a25cc:	17c8      	asrhi	r0, r1, #31
 80a25ce:	bf38      	it	cc
 80a25d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a25d4:	bf18      	it	ne
 80a25d6:	f040 0001 	orrne.w	r0, r0, #1
 80a25da:	4770      	bx	lr
 80a25dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a25e0:	d102      	bne.n	80a25e8 <__cmpsf2+0x4c>
 80a25e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a25e6:	d105      	bne.n	80a25f4 <__cmpsf2+0x58>
 80a25e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a25ec:	d1e4      	bne.n	80a25b8 <__cmpsf2+0x1c>
 80a25ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a25f2:	d0e1      	beq.n	80a25b8 <__cmpsf2+0x1c>
 80a25f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a25f8:	4770      	bx	lr
 80a25fa:	bf00      	nop

080a25fc <__aeabi_cfrcmple>:
 80a25fc:	4684      	mov	ip, r0
 80a25fe:	4608      	mov	r0, r1
 80a2600:	4661      	mov	r1, ip
 80a2602:	e7ff      	b.n	80a2604 <__aeabi_cfcmpeq>

080a2604 <__aeabi_cfcmpeq>:
 80a2604:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2606:	f7ff ffc9 	bl	80a259c <__cmpsf2>
 80a260a:	2800      	cmp	r0, #0
 80a260c:	bf48      	it	mi
 80a260e:	f110 0f00 	cmnmi.w	r0, #0
 80a2612:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2614 <__aeabi_fcmpeq>:
 80a2614:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2618:	f7ff fff4 	bl	80a2604 <__aeabi_cfcmpeq>
 80a261c:	bf0c      	ite	eq
 80a261e:	2001      	moveq	r0, #1
 80a2620:	2000      	movne	r0, #0
 80a2622:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2626:	bf00      	nop

080a2628 <__aeabi_fcmplt>:
 80a2628:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a262c:	f7ff ffea 	bl	80a2604 <__aeabi_cfcmpeq>
 80a2630:	bf34      	ite	cc
 80a2632:	2001      	movcc	r0, #1
 80a2634:	2000      	movcs	r0, #0
 80a2636:	f85d fb08 	ldr.w	pc, [sp], #8
 80a263a:	bf00      	nop

080a263c <__aeabi_fcmple>:
 80a263c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2640:	f7ff ffe0 	bl	80a2604 <__aeabi_cfcmpeq>
 80a2644:	bf94      	ite	ls
 80a2646:	2001      	movls	r0, #1
 80a2648:	2000      	movhi	r0, #0
 80a264a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a264e:	bf00      	nop

080a2650 <__aeabi_fcmpge>:
 80a2650:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2654:	f7ff ffd2 	bl	80a25fc <__aeabi_cfrcmple>
 80a2658:	bf94      	ite	ls
 80a265a:	2001      	movls	r0, #1
 80a265c:	2000      	movhi	r0, #0
 80a265e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2662:	bf00      	nop

080a2664 <__aeabi_fcmpgt>:
 80a2664:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2668:	f7ff ffc8 	bl	80a25fc <__aeabi_cfrcmple>
 80a266c:	bf34      	ite	cc
 80a266e:	2001      	movcc	r0, #1
 80a2670:	2000      	movcs	r0, #0
 80a2672:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2676:	bf00      	nop

080a2678 <__aeabi_f2iz>:
 80a2678:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a267c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2680:	d30f      	bcc.n	80a26a2 <__aeabi_f2iz+0x2a>
 80a2682:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2686:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a268a:	d90d      	bls.n	80a26a8 <__aeabi_f2iz+0x30>
 80a268c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2694:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2698:	fa23 f002 	lsr.w	r0, r3, r2
 80a269c:	bf18      	it	ne
 80a269e:	4240      	negne	r0, r0
 80a26a0:	4770      	bx	lr
 80a26a2:	f04f 0000 	mov.w	r0, #0
 80a26a6:	4770      	bx	lr
 80a26a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a26ac:	d101      	bne.n	80a26b2 <__aeabi_f2iz+0x3a>
 80a26ae:	0242      	lsls	r2, r0, #9
 80a26b0:	d105      	bne.n	80a26be <__aeabi_f2iz+0x46>
 80a26b2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a26b6:	bf08      	it	eq
 80a26b8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a26bc:	4770      	bx	lr
 80a26be:	f04f 0000 	mov.w	r0, #0
 80a26c2:	4770      	bx	lr

080a26c4 <atexit>:
 80a26c4:	2300      	movs	r3, #0
 80a26c6:	4601      	mov	r1, r0
 80a26c8:	461a      	mov	r2, r3
 80a26ca:	4618      	mov	r0, r3
 80a26cc:	f000 b868 	b.w	80a27a0 <__register_exitproc>

080a26d0 <memcpy>:
 80a26d0:	440a      	add	r2, r1
 80a26d2:	4291      	cmp	r1, r2
 80a26d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a26d8:	d100      	bne.n	80a26dc <memcpy+0xc>
 80a26da:	4770      	bx	lr
 80a26dc:	b510      	push	{r4, lr}
 80a26de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a26e2:	4291      	cmp	r1, r2
 80a26e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a26e8:	d1f9      	bne.n	80a26de <memcpy+0xe>
 80a26ea:	bd10      	pop	{r4, pc}

080a26ec <memset>:
 80a26ec:	4603      	mov	r3, r0
 80a26ee:	4402      	add	r2, r0
 80a26f0:	4293      	cmp	r3, r2
 80a26f2:	d100      	bne.n	80a26f6 <memset+0xa>
 80a26f4:	4770      	bx	lr
 80a26f6:	f803 1b01 	strb.w	r1, [r3], #1
 80a26fa:	e7f9      	b.n	80a26f0 <memset+0x4>

080a26fc <srand>:
 80a26fc:	b538      	push	{r3, r4, r5, lr}
 80a26fe:	4b10      	ldr	r3, [pc, #64]	; (80a2740 <srand+0x44>)
 80a2700:	4604      	mov	r4, r0
 80a2702:	681d      	ldr	r5, [r3, #0]
 80a2704:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2706:	b9b3      	cbnz	r3, 80a2736 <srand+0x3a>
 80a2708:	2018      	movs	r0, #24
 80a270a:	f7fe f981 	bl	80a0a10 <malloc>
 80a270e:	4602      	mov	r2, r0
 80a2710:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2712:	b920      	cbnz	r0, 80a271e <srand+0x22>
 80a2714:	2142      	movs	r1, #66	; 0x42
 80a2716:	4b0b      	ldr	r3, [pc, #44]	; (80a2744 <srand+0x48>)
 80a2718:	480b      	ldr	r0, [pc, #44]	; (80a2748 <srand+0x4c>)
 80a271a:	f7fe f9a1 	bl	80a0a60 <__assert_func>
 80a271e:	490b      	ldr	r1, [pc, #44]	; (80a274c <srand+0x50>)
 80a2720:	4b0b      	ldr	r3, [pc, #44]	; (80a2750 <srand+0x54>)
 80a2722:	e9c0 1300 	strd	r1, r3, [r0]
 80a2726:	4b0b      	ldr	r3, [pc, #44]	; (80a2754 <srand+0x58>)
 80a2728:	2100      	movs	r1, #0
 80a272a:	6083      	str	r3, [r0, #8]
 80a272c:	230b      	movs	r3, #11
 80a272e:	8183      	strh	r3, [r0, #12]
 80a2730:	2001      	movs	r0, #1
 80a2732:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a2736:	2200      	movs	r2, #0
 80a2738:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a273a:	611c      	str	r4, [r3, #16]
 80a273c:	615a      	str	r2, [r3, #20]
 80a273e:	bd38      	pop	{r3, r4, r5, pc}
 80a2740:	20000014 	.word	0x20000014
 80a2744:	080a2a45 	.word	0x080a2a45
 80a2748:	080a2a5c 	.word	0x080a2a5c
 80a274c:	abcd330e 	.word	0xabcd330e
 80a2750:	e66d1234 	.word	0xe66d1234
 80a2754:	0005deec 	.word	0x0005deec

080a2758 <strdup>:
 80a2758:	4b02      	ldr	r3, [pc, #8]	; (80a2764 <strdup+0xc>)
 80a275a:	4601      	mov	r1, r0
 80a275c:	6818      	ldr	r0, [r3, #0]
 80a275e:	f000 b803 	b.w	80a2768 <_strdup_r>
 80a2762:	bf00      	nop
 80a2764:	20000014 	.word	0x20000014

080a2768 <_strdup_r>:
 80a2768:	b570      	push	{r4, r5, r6, lr}
 80a276a:	4604      	mov	r4, r0
 80a276c:	4608      	mov	r0, r1
 80a276e:	460d      	mov	r5, r1
 80a2770:	f000 f80d 	bl	80a278e <strlen>
 80a2774:	1c46      	adds	r6, r0, #1
 80a2776:	4631      	mov	r1, r6
 80a2778:	4620      	mov	r0, r4
 80a277a:	f7fe f969 	bl	80a0a50 <_malloc_r>
 80a277e:	4604      	mov	r4, r0
 80a2780:	b118      	cbz	r0, 80a278a <_strdup_r+0x22>
 80a2782:	4632      	mov	r2, r6
 80a2784:	4629      	mov	r1, r5
 80a2786:	f7ff ffa3 	bl	80a26d0 <memcpy>
 80a278a:	4620      	mov	r0, r4
 80a278c:	bd70      	pop	{r4, r5, r6, pc}

080a278e <strlen>:
 80a278e:	4603      	mov	r3, r0
 80a2790:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2794:	2a00      	cmp	r2, #0
 80a2796:	d1fb      	bne.n	80a2790 <strlen+0x2>
 80a2798:	1a18      	subs	r0, r3, r0
 80a279a:	3801      	subs	r0, #1
 80a279c:	4770      	bx	lr
	...

080a27a0 <__register_exitproc>:
 80a27a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a27a4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a2854 <__register_exitproc+0xb4>
 80a27a8:	4606      	mov	r6, r0
 80a27aa:	f8d8 0000 	ldr.w	r0, [r8]
 80a27ae:	461f      	mov	r7, r3
 80a27b0:	460d      	mov	r5, r1
 80a27b2:	4691      	mov	r9, r2
 80a27b4:	f000 f858 	bl	80a2868 <__retarget_lock_acquire_recursive>
 80a27b8:	4b27      	ldr	r3, [pc, #156]	; (80a2858 <__register_exitproc+0xb8>)
 80a27ba:	681c      	ldr	r4, [r3, #0]
 80a27bc:	b934      	cbnz	r4, 80a27cc <__register_exitproc+0x2c>
 80a27be:	4c27      	ldr	r4, [pc, #156]	; (80a285c <__register_exitproc+0xbc>)
 80a27c0:	601c      	str	r4, [r3, #0]
 80a27c2:	4b27      	ldr	r3, [pc, #156]	; (80a2860 <__register_exitproc+0xc0>)
 80a27c4:	b113      	cbz	r3, 80a27cc <__register_exitproc+0x2c>
 80a27c6:	681b      	ldr	r3, [r3, #0]
 80a27c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a27cc:	6863      	ldr	r3, [r4, #4]
 80a27ce:	2b1f      	cmp	r3, #31
 80a27d0:	dd07      	ble.n	80a27e2 <__register_exitproc+0x42>
 80a27d2:	f8d8 0000 	ldr.w	r0, [r8]
 80a27d6:	f000 f849 	bl	80a286c <__retarget_lock_release_recursive>
 80a27da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a27de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a27e2:	b35e      	cbz	r6, 80a283c <__register_exitproc+0x9c>
 80a27e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a27e8:	b988      	cbnz	r0, 80a280e <__register_exitproc+0x6e>
 80a27ea:	4b1e      	ldr	r3, [pc, #120]	; (80a2864 <__register_exitproc+0xc4>)
 80a27ec:	b923      	cbnz	r3, 80a27f8 <__register_exitproc+0x58>
 80a27ee:	f8d8 0000 	ldr.w	r0, [r8]
 80a27f2:	f000 f83a 	bl	80a286a <__retarget_lock_release>
 80a27f6:	e7f0      	b.n	80a27da <__register_exitproc+0x3a>
 80a27f8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a27fc:	f7fe f908 	bl	80a0a10 <malloc>
 80a2800:	2800      	cmp	r0, #0
 80a2802:	d0f4      	beq.n	80a27ee <__register_exitproc+0x4e>
 80a2804:	2300      	movs	r3, #0
 80a2806:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a280a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a280e:	2201      	movs	r2, #1
 80a2810:	6863      	ldr	r3, [r4, #4]
 80a2812:	2e02      	cmp	r6, #2
 80a2814:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2818:	fa02 f203 	lsl.w	r2, r2, r3
 80a281c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2820:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2824:	ea43 0302 	orr.w	r3, r3, r2
 80a2828:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a282c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2830:	bf02      	ittt	eq
 80a2832:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2836:	4313      	orreq	r3, r2
 80a2838:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a283c:	6863      	ldr	r3, [r4, #4]
 80a283e:	f8d8 0000 	ldr.w	r0, [r8]
 80a2842:	1c5a      	adds	r2, r3, #1
 80a2844:	3302      	adds	r3, #2
 80a2846:	6062      	str	r2, [r4, #4]
 80a2848:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a284c:	f000 f80e 	bl	80a286c <__retarget_lock_release_recursive>
 80a2850:	2000      	movs	r0, #0
 80a2852:	e7c4      	b.n	80a27de <__register_exitproc+0x3e>
 80a2854:	20000078 	.word	0x20000078
 80a2858:	20000cdc 	.word	0x20000cdc
 80a285c:	20000c50 	.word	0x20000c50
 80a2860:	00000000 	.word	0x00000000
 80a2864:	080a0a11 	.word	0x080a0a11

080a2868 <__retarget_lock_acquire_recursive>:
 80a2868:	4770      	bx	lr

080a286a <__retarget_lock_release>:
 80a286a:	4770      	bx	lr

080a286c <__retarget_lock_release_recursive>:
 80a286c:	4770      	bx	lr

080a286e <link_code_end>:
	...

080a2870 <dynalib_user>:
 80a2870:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2880:	0000 0000 6f50 6577 6972 676e 6f20 2e6e     ....Powering on.
 80a2890:	2e2e 4800 6165 7472 5220 7461 3a65 0020     ...Heart Rate: .
 80a28a0:	6973 6e67 6c61 203a 4400 7461 2061 6f6e     signal: .Data no
 80a28b0:	2074 6562 6e69 2067 6572 6461 7020 6f72     t being read pro
 80a28c0:	6570 6c72 0079 6568 7261 5274 7461 0065     perly.heartRate.
 80a28d0:	6568 7261 4274 6165 0074 0000               heartBeat...

080a28dc <_ZTV7rgb_lcd>:
	...
 80a28e4:	046d 080a 046f 080a 04af 080a 1271 080a     m...o.......q...

080a28f4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a28fc:	0aaf 080a 0ab5 080a 0b05 080a 0ac3 080a     ................
 80a290c:	0ab1 080a                                   ....

080a2910 <_ZTV7TwoWire>:
	...
 80a2918:	1019 080a 1063 080a 103b 080a 101b 080a     ....c...;.......
 80a2928:	1043 080a 104b 080a 1053 080a 105b 080a     C...K...S...[...

080a2938 <_ZTV9IPAddress>:
	...
 80a2940:	10bf 080a 10bd 080a 10f1 080a 7061 0070     ............app.

080a2950 <_ZTVN5spark12NetworkClassE>:
	...
 80a2958:	1195 080a 119f 080a 11a9 080a 11b3 080a     ................
 80a2968:	11bd 080a 11c9 080a 11d5 080a 11dd 080a     ................
 80a2978:	11e5 080a 11f1 080a 11f9 080a 1203 080a     ................
 80a2988:	120d 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a2998:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a29a8 <_ZTV11USARTSerial>:
	...
 80a29b0:	1471 080a 14d9 080a 14b5 080a 1271 080a     q...........q...
 80a29c0:	1485 080a 14a1 080a 1493 080a 14af 080a     ................
 80a29d0:	1473 080a 1477 080a                         s...w...

080a29d8 <_ZTV9USBSerial>:
	...
 80a29e0:	1517 080a 157d 080a 1555 080a 1271 080a     ....}...U...q...
 80a29f0:	1547 080a 1519 080a 1529 080a 1577 080a     G.......)...w...
 80a2a00:	1539 080a 1511 080a                         9.......

080a2a08 <_ZTVN5spark9WiFiClassE>:
	...
 80a2a10:	1747 080a 173d 080a 1733 080a 16a5 080a     G...=...3.......
 80a2a20:	1727 080a 171b 080a 11d5 080a 11dd 080a     '...............
 80a2a30:	170f 080a 1707 080a 16fd 080a 16f3 080a     ................
 80a2a40:	16af 080a                                   ....

080a2a44 <_ZSt7nothrow>:
 80a2a44:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a2a54:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 80a2a64:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 80a2a74:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 80a2a84:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 80a2a94:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 80a2aa4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

080a2ab5 <link_const_variable_data_end>:
 80a2ab5:	00          	.byte	0x00
	...

080a2ab8 <link_constructors_location>:
 80a2ab8:	080a0441 	.word	0x080a0441
 80a2abc:	080a1185 	.word	0x080a1185
 80a2ac0:	080a125d 	.word	0x080a125d
 80a2ac4:	080a1331 	.word	0x080a1331
 80a2ac8:	080a1439 	.word	0x080a1439
 80a2acc:	080a145d 	.word	0x080a145d
 80a2ad0:	080a1751 	.word	0x080a1751
 80a2ad4:	080a1add 	.word	0x080a1add

080a2ad8 <link_constructors_end>:
	...
